name: Cut Release

on:
  push:
    tags:
      - "v*" # Run when tag matches v*, i.e. v1.0, v20.15.10

env:
  SOURCE_BIN: apollo-cli
  RELEASE_BIN: ap
  RELEASE_DIR: artifacts
  GITHUB_REF: "${{ github.ref }}"
  WINDOWS_TARGET: x86_64-pc-windows-msvc
  MACOS_TARGET: x86_64-apple-darwin
  LINUX_TARGET: x86_64-unknown-linux-musl
  WINDOWS_BUILD_NAME: windows
  MACOS_BUILD_NAME: darwin
  LINUX_BUILD_NAME: linux

  # Space separated paths to include in the archive.
  RELEASE_ADDS: Readme.md

# in the future, it may be worth tyring out thining binaries if they start to get large
# with https://github.com/marketplace/actions/strip-and-run-upx-on-executables
jobs:
  build:
    name: Build artifacts
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, macos, windows]
        include:
          - build: linux
            os: ubuntu-latest
            rust: stable
          - build: macos
            os: macos-latest
            rust: stable
          - build: windows
            os: windows-latest
            rust: stable

    steps:
      - uses: actions/checkout@v2

      - name: Cache Cargo registry
        uses: actions/cache@v1
        if: matrix.rust
        with:
          path: ~/.cargo/registry
          key: ${{ matrix.build }}-stable-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.build }}-stable-cargo-registry-

      - name: Cache Cargo index
        uses: actions/cache@v1
        if: matrix.rust
        with:
          path: ~/.cargo/git
          key: ${{ matrix.build }}-stable-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.build }}-stable-cargo-index-

      - name: Cache Cargo build
        uses: actions/cache@v1
        if: matrix.rust
        with:
          path: target/release
          key: ${{ matrix.build }}-stable-release-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.build }}-stable-release-target-

      - name: Query version number
        id: get_version
        shell: bash
        run: |
          echo "using version tag ${GITHUB_REF:10}"
          echo ::set-output name=version::"${GITHUB_REF:10}"

      - name: Install Rust
        if: matrix.rust
        run: |
          rustup update ${{ matrix.rust }} --no-self-update
          rustup default ${{ matrix.rust }}

      - name: Install musl-tools (Linux)
        if: matrix.build == 'linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install musl-tools -y

      - name: Install p7zip (MacOS)
        if: matrix.build == 'macos'
        run: brew install p7zip

      - name: Build (Linux)
        if: matrix.build == 'linux'
        run: |
          rustup target add ${{ env.LINUX_TARGET }}
          cargo build --release --target ${{ env.LINUX_TARGET }} --features vendored-openssl
      
      - name: Compress binaries (Linux)
        if: matrix.build == 'linux'
        uses: svenstaro/upx-action@v1-release
        with:
          file: target/${{ env.LINUX_TARGET }}/release/${{ env.SOURCE_BIN }}

      - name: Build (MacOS)
        if: matrix.build == 'macos'
        run: cargo build --release
      
      - name: Compress binaries (MacOS)
        if: matrix.build == 'macos'
        uses: svenstaro/upx-action@v1-release
        with:
          file: target/release/${{ env.SOURCE_BIN }}

      - name: Build (Windows)
        if: matrix.build == 'windows'
        run: cargo build --release
        env:
          RUSTFLAGS: -Ctarget-feature=+crt-static
        
      - name: Compress binaries (Windows)
        if: matrix.build == 'windows'
        uses: svenstaro/upx-action@v1-release
        with:
          file: target/release/${{ env.SOURCE_BIN }}.exe
      
      - name: Create artifact directory
        run: |
          mkdir ${{ env.RELEASE_DIR }}
          mkdir dist

      - name: Create tarball (Linux)
        if: matrix.build == 'linux'
        run: |
          mv ./target/${{ env.LINUX_TARGET }}/release/${{ env.SOURCE_BIN }} ./dist/${{ env.RELEASE_BIN }}
          mv ${{ env.RELEASE_ADDS }} ./dist
          7z a -ttar -so -an ./dist | 7z a -si ./${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.LINUX_BUILD_NAME }}.tar.gz

      - name: Create tarball (Windows)
        if: matrix.build == 'windows'
        shell: bash
        run: |
          mv ./target/release/${{ env.SOURCE_BIN }}.exe ./dist/${{ env.RELEASE_BIN }}.exe
          mv ${{ env.RELEASE_ADDS }} ./dist
          7z a -ttar -so -an ./dist | 7z a -si ./${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.WINDOWS_BUILD_NAME }}.tar.gz

      - name: Create tarball (MacOS)
        if: matrix.build == 'macos'
        run: |
          mv ./target/release/${{ env.SOURCE_BIN }} ./dist/${{ env.RELEASE_BIN }}
          mv ${{ env.RELEASE_ADDS }} ./dist
          7z a -ttar -so -an ./dist | 7z a -si ./${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.MACOS_BUILD_NAME }}.tar.gz

      - name: Upload Zip
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.build }}
          path: ./${{ env.RELEASE_DIR }}

  release:
    name: Github Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Query version number
        id: get_version
        shell: bash
        run: |
          echo "using version tag ${GITHUB_REF:10}"
          echo ::set-output name=version::"${GITHUB_REF:10}"

      - name: Get Changelog Entry
        id: changelog_reader
        uses: mindsers/changelog-reader-action@v1.1.0
        with:
          version: ${{ github.ref }}
          path: ./CHANGELOG.md
      
      - uses: actions/download-artifact@v2-preview

      - name: Unzip all files
        shell: bash
        run: |
          tar -xzvf ./linux/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.LINUX_BUILD_NAME }}.tar.gz && mv ./dist/${{ env.RELEASE_BIN }} ./linux-cli && rm -rf dist
          tar -xzvf ./windows/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.WINDOWS_BUILD_NAME }}.tar.gz && mv ./dist/${{ env.RELEASE_BIN }}.exe ./windows-cli.exe && rm -rf dist
          tar -xzvf ./macos/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.MACOS_BUILD_NAME }}.tar.gz && mv ./dist/${{ env.RELEASE_BIN }} ./macos-cli && rm -rf dist
      
      - name: Get Shas of builds
        id: get_shas
        shell: bash
        run: |
          echo ::set-output name=linux::"- __Linux__: $(sha256sum -b linux-cli | cut -d ' ' -f1)"
          echo ::set-output name=windows::"- __Windows__: $(sha256sum -b windows-cli.exe | cut -d ' ' -f1)"
          echo ::set-output name=macos::"- __MacOS__: $(sha256sum -b macos-cli | cut -d ' ' -f1)"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: ${{ steps.get_version.outputs.VERSION }}
          prerelease: ${{ contains(steps.get_version.outputs.VERSION, 'alpha') || contains(steps.get_version.outputs.VERSION, 'beta') }}
          body: |
            ${{ steps.changelog_reader.outputs.log_entry }}
            ---
            ### SHA256 of binaries below for validation:
            ${{ steps.get_shas.outputs.LINUX }}
            ${{ steps.get_shas.outputs.WINDOWS }}
            ${{ steps.get_shas.outputs.MACOS }}

      - name: Release Linux tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./linux/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.LINUX_BUILD_NAME }}.tar.gz
          asset_content_type: application/gzip
          asset_name: ${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.LINUX_BUILD_NAME }}.tar.gz

      - name: Release Windows tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./windows/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.WINDOWS_BUILD_NAME }}.tar.gz
          asset_content_type: application/gzip
          asset_name: ${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.WINDOWS_BUILD_NAME }}.tar.gz

      - name: Release MacOS tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./macos/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.MACOS_BUILD_NAME }}.tar.gz
          asset_content_type: application/gzip
          asset_name: ${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.MACOS_BUILD_NAME }}.tar.gz

      - name: Slack Notification
        uses: homoluctus/slatify@master
        if: always()
        with:
          type: ${{ job.status }}
          job_name: '*New release created*: ${{ steps.create_release.outputs.html_url }}'
          channel: '#eng-apollo-tooling'
          url: ${{ secrets.SLACK_WEBHOOK }}
          commit: true
          token: ${{ secrets.GITHUB_TOKEN }}
