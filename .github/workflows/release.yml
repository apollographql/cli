name: Cut Release

on:
  push:
    tags:
      - "v*" # Run when tag matches v*, i.e. v1.0, v20.15.10

env:
  SOURCE_BIN: apollo-cli
  RELEASE_BIN: ap
  RELEASE_DIR: artifacts
  GITHUB_REF: "${{ github.ref }}"
  CARGO_TERM_COLOR: always
  WINDOWS_BUILD_NAME: windows
  MACOS_BUILD_NAME: darwin
  LINUX_BUILD_NAME: linux

  # Space separated paths to include in the archive.
  RELEASE_ADDS: Readme.md

# in the future, it may be worth tyring out thining binaries if they start to get large
# with https://github.com/marketplace/actions/strip-and-run-upx-on-executables
jobs:
  build:
    name: Build artifacts
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, macos, windows]
        include:
          - build: linux
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-musl
            build_name: ${{ env.LINUX_BUILD_NAME }}
            rls_suffix: ''
          - build: macos
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
            build_name: ${{ env.MACOS_BUILD_NAME }}
            rls_suffix: ''
          - build: windows
            os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc
            build_name: ${{ env.WINDOWS_BUILD_NAME }}
            rls_suffix: '.exe'

    steps:
      - uses: actions/checkout@v2

      ### INSTALL RUST ###
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          profile: minimal
          override: true

      - name: Cache Cargo
        uses: actions/cache@v1
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ matrix.build }}-cargo-${{ steps.toolchain.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.build }}-cargo-${{ steps.toolchain.outputs.rustc_hash }}-

      - name: Query version number
        id: get_version
        shell: bash
        run: |
          echo "using version tag ${GITHUB_REF:10}"
          echo ::set-output name=version::"${GITHUB_REF:10}"

      ### OS SPECIFIC ###
      - name: Install musl-tools (Linux)
        if: matrix.build == 'linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install musl-tools -y

      - name: Install p7zip (MacOS)
        if: matrix.build == 'macos'
        run: brew install p7zip

      ### BUILD ###
      - name: Build (Linux)
        if: matrix.build == 'linux'
        run: |
          cd cli && cargo build --release --target ${{ matrix.target }} --features vendored-openssl

      - name: Build (MacOS)
        if: matrix.build == 'macos'
        run: cargo build --release

      - name: Build (Windows)
        if: matrix.build == 'windows'
        run: cargo build --release
        env:
          RUSTFLAGS: -Ctarget-feature=+crt-static

      ### COMPRESS ###
      - name: Compress binaries (${{ matrix.build }})
        uses: svenstaro/upx-action@v1-release
        with:
          file: target/${{ matrix.target }}/release/${{ env.SOURCE_BIN }}${{ matrix.rls_suffix }}

      - name: Create artifact directory
        run: |
          mkdir ${{ env.RELEASE_DIR }}
          mkdir dist

      ### TARBALL ###
      - name: Create tarball (${{ matrix.build }})
        shell: bash
        run: |
          mv ./target/${{ matrix.target }}/release/${{ env.SOURCE_BIN }}${{ matrix.rls_suffix }} ./dist/${{ env.RELEASE_BIN }}${{ matrix.rls_suffix }}
          mv ${{ env.RELEASE_ADDS }} ./dist
          7z a -ttar -so -an ./dist | 7z a -si ./${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ matrix.build_name }}.tar.gz

      - name: Upload Zip
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.build }}
          path: ./${{ env.RELEASE_DIR }}

  release:
    name: Github Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Query version number
        id: get_version
        shell: bash
        run: |
          echo "using version tag ${GITHUB_REF:10}"
          echo ::set-output name=version::"${GITHUB_REF:10}"

      - name: Get Changelog Entry
        id: changelog_reader
        uses: mindsers/changelog-reader-action@v1.1.0
        with:
          version: ${{ github.ref }}
          path: ./CHANGELOG.md
      
      - uses: actions/download-artifact@v2-preview

      - name: Unzip all files
        shell: bash
        run: |
          tar -xzvf ./linux/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.LINUX_BUILD_NAME }}.tar.gz && mv ./dist/${{ env.RELEASE_BIN }} ./linux-cli && rm -rf dist
          tar -xzvf ./windows/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.WINDOWS_BUILD_NAME }}.tar.gz && mv ./dist/${{ env.RELEASE_BIN }}.exe ./windows-cli.exe && rm -rf dist
          tar -xzvf ./macos/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.MACOS_BUILD_NAME }}.tar.gz && mv ./dist/${{ env.RELEASE_BIN }} ./macos-cli && rm -rf dist
      
      - name: Get Shas of builds
        id: get_shas
        shell: bash
        run: |
          echo ::set-output name=linux::"- __Linux__: $(sha256sum -b linux-cli | cut -d ' ' -f1)"
          echo ::set-output name=windows::"- __Windows__: $(sha256sum -b windows-cli.exe | cut -d ' ' -f1)"
          echo ::set-output name=macos::"- __MacOS__: $(sha256sum -b macos-cli | cut -d ' ' -f1)"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: ${{ steps.get_version.outputs.VERSION }}
          prerelease: ${{ contains(steps.get_version.outputs.VERSION, 'alpha') || contains(steps.get_version.outputs.VERSION, 'beta') }}
          body: |
            ${{ steps.changelog_reader.outputs.log_entry }}
            ---
            ### SHA256 of binaries below for validation:
            ${{ steps.get_shas.outputs.LINUX }}
            ${{ steps.get_shas.outputs.WINDOWS }}
            ${{ steps.get_shas.outputs.MACOS }}

      - name: Release Linux tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./linux/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.LINUX_BUILD_NAME }}.tar.gz
          asset_content_type: application/gzip
          asset_name: ${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.LINUX_BUILD_NAME }}.tar.gz

      - name: Release Windows tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./windows/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.WINDOWS_BUILD_NAME }}.tar.gz
          asset_content_type: application/gzip
          asset_name: ${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.WINDOWS_BUILD_NAME }}.tar.gz

      - name: Release MacOS tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./macos/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.MACOS_BUILD_NAME }}.tar.gz
          asset_content_type: application/gzip
          asset_name: ${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.MACOS_BUILD_NAME }}.tar.gz

      - name: Slack Notification
        uses: homoluctus/slatify@master
        if: always()
        with:
          type: ${{ job.status }}
          job_name: '*New release created*: ${{ steps.create_release.outputs.html_url }}'
          channel: '#eng-apollo-tooling'
          url: ${{ secrets.SLACK_WEBHOOK }}
          commit: true
          token: ${{ secrets.GITHUB_TOKEN }}
