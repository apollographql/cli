name: PR Builds

on: [pull_request]

env:
  SOURCE_BIN: apollo-cli
  RELEASE_BIN: ap
  GITHUB_REF: "${{ github.ref }}"
  WINDOWS_TARGET: x86_64-pc-windows-msvc
  MACOS_TARGET: x86_64-apple-darwin
  LINUX_TARGET: x86_64-unknown-linux-musl

  # Space separated paths to include in the archive.
  RELEASE_ADDS: README.md

jobs:
  check_format_and_lint:
    continue-on-error: true # we want to show this check failure in GH but to not prevent building.
    name: Check formatting (rustfmt) and lint with Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          components: rustfmt, clippy

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Check Clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features

  build:
    name: Build artifacts
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, macos, windows]
        include:
          - build: linux
            os: ubuntu-latest
            rust: stable
          - build: macos
            os: macos-latest
            rust: stable
          - build: windows
            os: windows-latest
            rust: stable

    steps:
      - uses: actions/checkout@v2

      ### INSTALL RUST ###
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          profile: minimal
          override: true

      ### BUILD CACHE ###
      - name: Cache Cargo registry
        uses: actions/cache@v1
        if: matrix.rust
        with:
          path: ~/.cargo/registry
          key: ${{ matrix.build }}-stable-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.build }}-stable-cargo-registry-

      - name: Cache Cargo index
        uses: actions/cache@v1
        if: matrix.rust
        with:
          path: ~/.cargo/git
          key: ${{ matrix.build }}-stable-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.build }}-stable-cargo-index-

      - name: Cache Cargo build
        uses: actions/cache@v1
        if: matrix.rust
        with:
          path: target/release
          key: ${{ matrix.build }}-stable-release-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.build }}-stable-release-target-

      ### OS SPECIFIC ###
      - name: Install musl-tools (Linux)
        if: matrix.build == 'linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install musl-tools -y

      - name: Install p7zip (MacOS)
        if: matrix.build == 'macos'
        run: brew install p7zip

      ### BUILD ###
      - name: Build (Linux)
        if: matrix.build == 'linux'
        run: |
          rustup target add ${{ env.LINUX_TARGET }}
          cd cli && cargo build --release --target ${{ env.LINUX_TARGET }} --features vendored-openssl

      - name: Build (Windows)
        if: matrix.build == 'windows'
        run: cargo build --release
        env:
          RUSTFLAGS: -Ctarget-feature=+crt-static

      - name: Build (MacOS)
        if: matrix.build == 'macos'
        run: cargo build --release
      
      ### COMPRESS ###
      - name: Compress binaries (Linux)
        if: matrix.build == 'linux'
        uses: svenstaro/upx-action@v1-release
        with:
          file: target/${{ env.LINUX_TARGET }}/release/${{ env.SOURCE_BIN }}

      - name: Compress binaries (Windows)
        if: matrix.build == 'windows'
        uses: svenstaro/upx-action@v1-release
        with:
          file: target/release/${{ env.SOURCE_BIN }}.exe

      - name: Compress binaries (MacOS)
        if: matrix.build == 'macos'
        uses: svenstaro/upx-action@v1-release
        with:
          file: target/release/${{ env.SOURCE_BIN }}

      - name: Create artifact directory
        run: |
          mkdir dist
                  
      ### CREATE DISTRIBUTION ###
      - name: Create distribution (Linux)
        if: matrix.build == 'linux'
        run: |
          mv ./target/${{ env.LINUX_TARGET }}/release/${{ env.SOURCE_BIN }} ./dist/${{ env.RELEASE_BIN }}
          mv ${{ env.RELEASE_ADDS }} ./dist

      - name: Create distribution (Windows)
        if: matrix.build == 'windows'
        shell: bash
        run: |
          mv ./target/release/${{ env.SOURCE_BIN }}.exe ./dist/${{ env.RELEASE_BIN }}.exe
          mv ${{ env.RELEASE_ADDS }} ./dist

      - name: Create distribution (MacOS)
        if: matrix.build == 'macos'
        run: |
          mv ./target/release/${{ env.SOURCE_BIN }} ./dist/${{ env.RELEASE_BIN }}
          mv ${{ env.RELEASE_ADDS }} ./dist

      - name: Upload Zip
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.build }}
          path: ./dist

  sha256:
    name: Create sha256 of binaries
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2-preview
      
      - name: Create sha output file
        shell: bash
        run: |
          touch sha256.txt
          echo "$(sha256sum -b ./linux/${{ env.RELEASE_BIN }})" >> sha256.txt
          echo "$(sha256sum -b ./windows/${{ env.RELEASE_BIN }}.exe)" >> sha256.txt
          echo "$(sha256sum -b ./macos/${{ env.RELEASE_BIN }})" >> sha256.txt
      
      - uses: actions/upload-artifact@v2-preview
        with:
          name: sha256
          path: ./sha256.txt
