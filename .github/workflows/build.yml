name: Rust PR Builds

on:
  pull_request:
    paths: # this is meant to mean any change except in `cdn`.
      - '**'
      - '!cdn/**'

defaults:
  run:
    shell: bash

env:
  SOURCE_BIN: apollo-cli
  RELEASE_BIN: ap
  GITHUB_REF: "${{ github.ref }}"

  # Space separated paths to include in the archive.
  RELEASE_ADDS: README.md

jobs:
  check_format_and_lint:
    continue-on-error: true # we want to show this check failure in GH but to not prevent building.
    name: Check formatting (rustfmt) and lint with Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          components: rustfmt, clippy

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Check Clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features

  build:
    name: Build artifacts
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, macos, windows]
        include:
          - build: linux
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-musl
            bin_extension: ''
          - build: macos
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
            bin_extension: ''
          - build: windows
            os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc
            bin_extension: '.exe'

    steps:
      - uses: actions/checkout@v2

      ### INSTALL RUST ###
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          profile: minimal
          override: true

      ### BUILD CACHE ###
      - name: Cache Cargo registry
        uses: actions/cache@v1
        if: matrix.rust
        with:
          path: ~/.cargo/registry
          key: ${{ matrix.build }}-stable-cargo-registry-${{ hashFiles('**/Cargo.*') }}
          restore-keys: |
            ${{ matrix.build }}-stable-cargo-registry-

      - name: Cache Cargo index
        uses: actions/cache@v1
        if: matrix.rust
        with:
          path: ~/.cargo/git
          key: ${{ matrix.build }}-stable-cargo-index-${{ hashFiles('**/Cargo.*') }}
          restore-keys: |
            ${{ matrix.build }}-stable-cargo-index-

      - name: Cache Cargo build
        uses: actions/cache@v1
        if: matrix.rust
        with:
          path: target/release
          key: ${{ matrix.build }}-stable-release-target-${{ hashFiles('**/Cargo.*') }}
          restore-keys: |
            ${{ matrix.build }}-stable-release-target-

      ### OS SPECIFIC ###
      - name: Install musl-tools (Linux)
        if: matrix.build == 'linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install musl-tools -y

      ### BUILD ###
      - name: Build workspace (MacOS, Linux)
        if: matrix.build != 'windows'
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: "--release"

      - name: Build workspace (Windows)
        if: matrix.build == 'windows'
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: "--release"
        env:
          RUSTFLAGS: -Ctarget-feature=+crt-static

      - name: Build CLI (Linux)
        if: matrix.build == 'linux'
        run: cargo build --release -p apollo-cli --features vendored-openssl

      ### COMPRESS ###
      - name: Compress binaries
        uses: svenstaro/upx-action@v1-release
        with:
          file: target/${{ matrix.target }}/release/${{ env.SOURCE_BIN }}${{ matrix.bin_extension}}

      - name: Create artifact directory
        run: |
          mkdir dist

      ### CREATE DISTRIBUTION ###
      - name: Create distribution
        if: matrix.build == 'linux'
        run: |
          mv ./target/${{ env.LINUX_TARGET }}/release/${{ env.SOURCE_BIN }}${{ matrix.bin_extension}} ./dist/${{ env.RELEASE_BIN }}${{ matrix.bin_extension}}
          mv ${{ env.RELEASE_ADDS }} ./dist

      - name: Upload Zip
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.build }}
          path: ./dist

  sha256:
    name: Create sha256 of binaries
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2-preview

      - name: Create sha output file
        run: |
          touch sha256.txt
          echo "$(sha256sum -b ./linux/${{ env.RELEASE_BIN }})" >> sha256.txt
          echo "$(sha256sum -b ./windows/${{ env.RELEASE_BIN }}.exe)" >> sha256.txt
          echo "$(sha256sum -b ./macos/${{ env.RELEASE_BIN }})" >> sha256.txt

      - uses: actions/upload-artifact@v2-preview
        with:
          name: sha256
          path: ./sha256.txt
