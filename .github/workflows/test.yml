name: Tests

on: [push] # temporary!! FIXME: Do not merge, restore to `pull_request`

jobs:
  test:
    name: Test Rust Packages

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build:
          [
            linux-stable,
            macos-stable,
            windows-stable,
          ]
        include:
          - build: linux
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-musl
          - build: macos
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
          - build: windows
            os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc

    steps:
      - uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          profile: minimal
          override: true

      - name: Cache Cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ matrix.build }}-${{ steps.toolchain.outputs.rustc_hash }}-cargo-registry-${{ hashFiles('**/Cargo.*') }}
          restore-keys: |
            ${{ matrix.build }}-${{ steps.toolchain.outputs.rustc_hash }}-cargo-registry-

      - name: Cache Cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ matrix.build }}-${{ steps.toolchain.outputs.rustc_hash }}-cargo-index-${{ hashFiles('**/Cargo.*') }}
          restore-keys: |
            ${{ matrix.build }}-${{ steps.toolchain.outputs.rustc_hash }}-cargo-index-

      - name: Cache Cargo build
        uses: actions/cache@v1
        with:
          path: target/debug
          key: ${{ matrix.build }}-${{ steps.toolchain.outputs.rustc_hash }}-debug-target-${{ hashFiles('**/Cargo.*') }}
          restore-keys: |
            ${{ matrix.build }}-${{ steps.toolchain.outputs.rustc_hash }}-debug-target-

      - name: Run Tests
#        if: matrix.build != 'linux-stable'
        run: cargo test
        env:
          RUST_LOG: warn,apollo-cli=info
          RUST_BACKTRACE: 1

# Restore this when we get coverage working well -- integration tests on binary packages don't report coverage correctly.
#      - name: Run cargo-tarpaulin
#        if: matrix.build == 'linux-stable'
#        uses: actions-rs/tarpaulin@v0.1
#        with:
#          version: '0.9.0'
#          timeout: 600 # 10 mins for test coverage
#          args: '--ignore-tests'
  
#      - name: Upload to codecov.io
#        if: matrix.build == 'linux-stable'
#        uses: codecov/codecov-action@v1.0.2
#        with:
#          token: ${{secrets.CODECOV_TOKEN}}

  test_worker:
    name: Test CDN and installer
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: cdn

    steps:
    - uses: actions/checkout@v2

    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '12.x'
    
    - name: Cache Node.js modules
      uses: actions/cache@v1
      with:
        path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
        key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-

    - name: Install dependencies
      run: npm ci

    - run: npm test -- --coverage
      env:
        CI: true

    - name: Upload worker results to codecov.io
      uses: codecov/codecov-action@v1.0.2
      with:
        token: ${{secrets.CODECOV_TOKEN}}
        name: cdn

    - name: Use Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 2.6
    
    - name: Install bashcov for installer coverage
      run: |
        gem install bashcov
        gem install codecov
    
    - name: Run coverage for installer
      env:
        CODECOV_TOKEN: ${{secrets.CODECOV_TOKEN}}
      run: bashcov --skip-uncovered -- ./node_modules/.bin/bats ./test/*.bats
