name: Build and Test Rust

on:
  push: # temporary!! FIXME: Do not merge, restore to `pull_request`
    paths: # this is meant to mean any change except in `cdn`.
      - '**'
      - '!cdn/**'

env:
  CARGO_TERM_COLOR: always

jobs:
  check_format_and_lint:
    continue-on-error: true # we want to show this check failure in GH but to not prevent building.
    name: Check formatting (rustfmt) and lint with Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          components: rustfmt, clippy

      ### BUILD CACHE ###
      - name: Cache Cargo registry, target, index
        uses: actions/cache@v2
        if: matrix.rust
        with:
          path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
          key: ${{ matrix.build }}-${{ steps.toolchain.outputs.rustc_hash }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.build }}-${{ steps.toolchain.outputs.rustc_hash }}-cargo-

      ### FORMATTING AND STYLE ###
      - name: Check formatting
        run: cargo fmt -- --check

      - name: Check Clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features

  test-no-run:
    name: Compile tests

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [macos]
        include:
          - build: linux
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-musl
          - build: macos
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
          - build: windows
            os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc

    steps:
      - uses: actions/checkout@v2

      ### INSTALL RUST ###
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          profile: minimal
          override: true

      ### BUILD CACHE ###
      - name: Cache Cargo registry, target, index
        uses: actions/cache@v2
        if: matrix.rust
        with:
          path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
          key: ${{ matrix.build }}-${{ steps.toolchain.outputs.rustc_hash }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.build }}-${{ steps.toolchain.outputs.rustc_hash }}-cargo-

      ### COMPILE INCLUDING TESTS ###
      # Note: we do this so that we'll cache the compile results/registry even if test might fail
      - name: Compile tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: "--no-run"

  test:
    name: Test
    needs: test-no-run

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [macos]
        include:
          - build: macos
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin

    steps:
      - uses: actions/checkout@v2

      ### INSTALL RUST ###
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          profile: minimal
          override: true

      ### BUILD CACHE ###
      - name: Cache Cargo registry, target, index
        uses: actions/cache@v2
        if: matrix.rust
        with:
          path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
          key: ${{ matrix.build }}-${{ steps.toolchain.outputs.rustc_hash }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.build }}-${{ steps.toolchain.outputs.rustc_hash }}-cargo-

      ### RUN TESTS ###
      - name: Test (cargo test)
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: "-- --nocapture"
        env:
          RUST_LOG: debug
          RUST_BACKTRACE: 1
