name: Build CLI Binary

on:
  pull_request:
    types: [labeled]

defaults:
  run:
    shell: bash

env:
  CARGO_TERM_COLOR: always
  SOURCE_BIN: apollo-cli
  RELEASE_BIN: ap
  GITHUB_REF: "${{ github.event.deployment.ref }}"

  # Space separated paths to include in the archive.
  RELEASE_ADDS: README.md

jobs:
  build:
    name: Build artifacts
    if: github.event.label.name == 'build-binary'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, macos, windows]
        include:
          - build: linux
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-musl
            bin_extension: ''
          - build: macos
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
            bin_extension: ''
          - build: windows
            os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc
            bin_extension: '.exe'

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.deployment.ref }}

      ### INSTALL RUST ###
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          profile: minimal
          override: true

      ### BUILD CACHE ###
      - name: Cache Cargo registry, target, index
        uses: actions/cache@v2
        if: matrix.rust
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ matrix.build }}-${{ steps.toolchain.outputs.rustc_hash }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.build }}-${{ steps.toolchain.outputs.rustc_hash }}-cargo-

      ### OS SPECIFIC ###
      - name: Install musl-tools (Linux)
        if: matrix.build == 'linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install musl-tools -y

      ### BUILD ###
      - name: Build CLI (Linux)
        if: matrix.build == 'linux'
        working-directory: cli
        run: |
          cargo build --release -p apollo-cli --features vendored-openssl --target ${{ matrix.target }}

      - name: Build CLI (Windows)
        if: matrix.build == 'windows'
        working-directory: cli
        run: |
          cargo build --release -p apollo-cli --target ${{ matrix.target }}
        env:
          RUSTFLAGS: -Ctarget-feature=+crt-static

      - name: Build CLI (MacOS)
        if: matrix.build == 'macos'
        working-directory: cli
        run: |
          cargo build --release -p apollo-cli --target ${{ matrix.target }}

      ### COMPRESS ###
      - name: Compress binaries
        uses: svenstaro/upx-action@v1-release
        with:
          file: target/${{ matrix.target }}/release/${{ env.SOURCE_BIN }}${{ matrix.bin_extension }}

      - name: Create artifact directory
        run: |
          mkdir dist

      ### CREATE DISTRIBUTION ###
      - name: Create distribution
        run: |
          mv ./target/${{ matrix.target }}/release/${{ env.SOURCE_BIN }}${{ matrix.bin_extension }} ./dist/${{ env.RELEASE_BIN }}${{ matrix.bin_extension }}
          mv ${{ env.RELEASE_ADDS }} ./dist

      - name: Upload Zip
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.build }}
          path: ./dist

  sha256:
    name: Create sha256 of binaries
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2-preview

      - name: Create sha output file
        run: |
          touch sha256.txt
          echo "$(sha256sum -b ./linux/${{ env.RELEASE_BIN }})" >> sha256.txt
          echo "$(sha256sum -b ./windows/${{ env.RELEASE_BIN }}.exe)" >> sha256.txt
          echo "$(sha256sum -b ./macos/${{ env.RELEASE_BIN }})" >> sha256.txt

      - uses: actions/upload-artifact@v2-preview
        with:
          name: sha256
          path: ./sha256.txt
