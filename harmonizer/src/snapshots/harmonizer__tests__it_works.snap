---
source: harmonizer/src/lib.rs
expression: "harmonize(vec![ServiceDefinition ::\n               new(\"users\", \"undefined\",\n                   \"\n            type User {\n              id: ID\n              name: String\n            }\n\n            type Query {\n              users: [User!]\n            }\n          \"),\n               ServiceDefinition ::\n               new(\"movies\", \"undefined\",\n                   \"\n            type Movie {\n              title: String\n              name: String\n            }\n\n            extend type User {\n              favorites: [Movie!]\n            }\n\n            type Query {\n              movies: [Movie!]\n            }\n          \")]).unwrap()"
---
schema
  @graph(name: "users", url: "undefined")
  @graph(name: "movies", url: "undefined")
  @composedGraph(version: 1)
{
  query: Query
}

directive @composedGraph(version: Int!) on SCHEMA

directive @graph(name: String!, url: String!) repeatable on SCHEMA

directive @owner(graph: String!) on OBJECT

directive @key(fields: String!, graph: String!) repeatable on OBJECT

directive @resolve(graph: String!) on FIELD_DEFINITION

directive @provides(fields: String!) on FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

type Movie {
  title: String
  name: String
}

type Query {
  users: [User!] @resolve(graph: "users")
  movies: [Movie!] @resolve(graph: "movies")
}

type User {
  id: ID
  name: String
  favorites: [Movie!] @resolve(graph: "movies")
}

