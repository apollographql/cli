type AffectedClient {
    """ID, often the name, of the client set by the user and reported alongside metrics"""
    clientReferenceId: ID
    """version of the client set by the user and reported alongside metrics"""
    clientVersion: String
}

type AffectedQuery {
    id: ID!
    """first 128 characters of query signature for display"""
    signature: String
    name: String
    metrics: AffectedQueryMetrics
}

type AffectedQueryMetrics {
    """total requests for service during 24 hours before schema publish"""
    dayBeforePublishTotalRequestCount: Int
}

type Change {
    """Indication of the success of the overall change, either failure, warning, or notice."""
    type: ChangeType! @deprecated(reason: "use severity instead")
    """Indication of the success of the overall change, either failure, warning, or notice."""
    severity: ChangeSeverity!
    """Indication of the kind of target and action of the change, e.g. 'TYPE_REMOVED'."""
    code: String!
    """Explanation of both the target of the change and how it was changed."""
    description: String! @deprecated(reason: "generate this string from the code, typeNode, fieldNode, and argNode")
    affectedQueries: [AffectedQuery!]
    """
    IDs of clients affected by change. The client ID can be empty, which is represented
    as null
    """
    affectedClientReferenceIds: [ID]
    """
    Clients affected by change. Each entry is a unique tuple of client reference ID
    and version. If clientReferenceId is requested without clientVersion, the result
    can have duplicate values
    """
    affectedClientIdVersionPairs: [AffectedClient!]
    """Top level node affected by the change"""
    parentNode: NamedIntrospectionType
    """
    Node related to the top level node that was changed, such as a field in an object,
    a value in an enum or the object of an interface
    """
    childNode: NamedIntrospectionValue
    """Target arg of change made."""
    argNode: NamedIntrospectionArg
}

enum ChangeSeverity {
    FAILURE
    WARNING
    NOTICE
}

enum ChangeType {
    FAILURE
    WARNING
    NOTICE
}

type CheckOperationsResult {
    changes: [Change!]!
}

type CheckPartialSchemaResult {
    """Result of composition validation run before the schema check."""
    compositionValidationResult: CompositionValidationResult!
    """Result of traffic validation. This will be null if composition validation was unsuccessful."""
    checkSchemaResult: CheckSchemaResult
}

type CheckSchemaResult {
    """Schema diff and affected operations generated by the schema check"""
    diffToPrevious: SchemaDiff!
    """Generated url to view schema diff in Engine"""
    targetUrl: String
}

"""Metadata about the result of composition run in the cloud, combined with removing an implementing service"""
type CompositionAndRemoveResult {
    """The produced composition config. Will be null if there are any errors"""
    compositionConfig: CompositionConfig
    """
    List of errors during composition. Errors mean that Apollo was unable to compose the
    graph's implementing services into a GraphQL schema. This partial schema should not be
    published to the implementing service if there were any errors encountered
    """
    errors: [SchemaCompositionError]!
    """Whether the gateway link was updated."""
    updatedGateway: Boolean!
    """Whether the removed implementing service existed"""
    didExist: Boolean!
    """ID that points to the results of composition."""
    graphCompositionID: String!
}

"""Metadata about the result of composition run in the cloud, combined with implementing service upsert"""
type CompositionAndUpsertResult {
    """The produced composition config. Will be null if there are any errors"""
    compositionConfig: CompositionConfig
    """
    List of errors during composition. Errors mean that Apollo was unable to compose the
    graph's implementing services into a GraphQL schema. This partial schema should not be
    published to the implementing service if there were any errors encountered
    """
    errors: [SchemaCompositionError]!
    """Whether the gateway link was updated."""
    updatedGateway: Boolean!
    """Whether an implementingService was created as part of this mutation"""
    wasCreated: Boolean!
    """ID that points to the results of composition."""
    graphCompositionID: String!
    """Whether an implementingService was updated as part of this mutation"""
    wasUpdated: Boolean!
}

"""The composition config exposed to the gateway"""
type CompositionConfig {
    """List of implementing services that comprise a composed graph"""
    implementingServiceLocations: [ImplementingServiceLocation!]!
    """Hash of the composed schema"""
    schemaHash: String!
}

"""Metadata about the result of composition run in the cloud"""
type CompositionPublishResult {
    """The produced composition config. Will be null if there are any errors"""
    compositionConfig: CompositionConfig
    """
    List of errors during composition. Errors mean that Apollo was unable to compose the
    graph's implementing services into a GraphQL schema. This partial schema should not be
    published to the implementing service if there were any errors encountered
    """
    errors: [SchemaCompositionError!]!
    """Whether the gateway link was updated."""
    updatedGateway: Boolean!
    """ID that points to composition result."""
    graphCompositionID: String!
}

"""Result of a composition, either as the result of a composition validation or a publish."""
union CompositionResult = CompositionValidationResult | CompositionPublishResult

"""The composition config exposed to the gateway"""
type CompositionValidationDetails {
    """List of implementing service partial schemas that comprised the graph composed during validation"""
    implementingServices: [FederatedImplementingServicePartialSchema!]!
    """Hash of the composed schema"""
    schemaHash: String
}

"""Metadata about the result of compositions validation run in the cloud"""
type CompositionValidationResult {
    """
    Akin to a composition config, represents the partial schemas and implementing services that were used
    in running composition. Will be null if any errors are encountered. Also may contain a schema hash if
    one could be computed, which can be used for schema validation.
    """
    compositionValidationDetails: CompositionValidationDetails
    """The implementing service that was responsible for triggering the validation"""
    proposedImplementingService: FederatedImplementingServicePartialSchema!
    """
    List of errors during composition. Errors mean that Apollo was unable to compose the
    graph's implementing services into a GraphQL schema. This partial schema should not be
    published to the implementing service if there were any errors encountered
    """
    errors: [SchemaCompositionError]!
    """Describes whether composition succeeded."""
    compositionSuccess: Boolean!
    """ID that points to the results of this composition."""
    graphCompositionID: String!
}

type DeleteSchemaTagResult {
    deleted: Boolean!
    deletedSubscriptionIDs: [ID!]!
}

type FederatedImplementingService {
    """Name of the implementing service"""
    name: String!
    """URL of the graphql endpoint of the implementing service"""
    url: String
    """
    A way to capture some customer-specific way of tracking which version / edition
    of the ImplementingService this is. Typically a Git SHA or docker image ID.
    """
    revision: String!
    """
    Identifies which graph this implementing service belongs to.
    Formerly known as "service_id"
  """
    graphID: String!
    """
    Specifies which variant of a graph this implementing service belongs to".
    Formerly known as "tag"
  """
    graphVariant: String!
    """
    An implementing service could have multiple inactive partial schemas that were previously uploaded
    activePartialSchema returns the one that is designated to be used for composition for a given graph-variant
    """
    activePartialSchema: PartialSchema!
    """Timestamp of when this implementing service was created"""
    createdAt: Timestamp!
    """Timestamp for when this implementing service was updated"""
    updatedAt: Timestamp!
}

"""A minimal representation of a federated implementing service, using only a name and partial schema SDL"""
type FederatedImplementingServicePartialSchema {
    """The name of the implementing service"""
    name: String!
    """The partial schema of the implementing service"""
    sdl: String!
}

"""List of federated implementing services that compose a graph"""
type FederatedImplementingServices {
    services: [FederatedImplementingService!]!
}

type GitContext {
    remoteUrl: String
    commit: ID!
    committer: String
    message: String
    branch: String
}

"""This is stored with a schema when it is uploaded"""
input GitContextInput {
    remoteUrl: String
    commit: ID!
    committer: String
    message: String
    branch: String
}

"""A union of all combinations that can comprise the implementingServices for a Service"""
union GraphImplementors = NonFederatedImplementingService | FederatedImplementingServices

"""A GraphQL document"""
scalar GraphQLDocument

"""A variant of a graph, also called a schema tag in parts of our product."""
type GraphVariant {
    """Global identifier for the graph variant, in the form `graph@variant`."""
    id: ID!
    """Graph ID of the variant"""
    graphId: String!
    """Name of the variant, like `variant`."""
    name: String!
    """URL where the graph can be queried."""
    url: String
    """As new schema tags keep getting published, activeSchemaPublish refers to the latest."""
    activeSchemaPublish: SchemaTag
    autoPromotion: Boolean!
}

"""Modifies a variant of a graph, also called a schema tag in parts of our product."""
type GraphVariantMutation {
    """Global identifier for the graph variant, in the form `graph@variant`."""
    id: ID!
    """Graph ID of the variant"""
    graphId: String!
    """Name of the variant, like `variant`."""
    name: String!
    updateURL(url: String): GraphVariant
    autoPromotion(enable: Boolean): Boolean!
}

input HistoricQueryParameters {
    from: Timestamp = "-86400"
    to: Timestamp = "-0"
    """Minimum number of requests within the window for a query to be considered."""
    queryCountThreshold: Int = 1
    """
    Number of requests within the window for a query to be considered, relative to
    total request count. Expected values are between 0 and 0.05 (minimum 5% of total
    request volume)
    """
    queryCountThresholdPercentage: Float = 0
}

"""The location of the implementing service config file in storage"""
type ImplementingServiceLocation {
    """The name of the implementing service"""
    name: String!
    """The path in storage to access the implementing service config file"""
    path: String!
}

type IntrospectionDirective {
    name: String!
    description: String
    locations: [IntrospectionDirectiveLocation!]!
    args: [IntrospectionInputValue!]!
}

input IntrospectionDirectiveInput {
    name: String!
    description: String
    locations: [IntrospectionDirectiveLocation!]!
    args: [IntrospectionInputValueInput!]!
    isRepeatable: Boolean
}

"""__DirectiveLocation introspection type"""
enum IntrospectionDirectiveLocation {
    """Location adjacent to a query operation."""
    QUERY
    """Location adjacent to a mutation operation."""
    MUTATION
    """Location adjacent to a subscription operation."""
    SUBSCRIPTION
    """Location adjacent to a field."""
    FIELD
    """Location adjacent to a fragment definition."""
    FRAGMENT_DEFINITION
    """Location adjacent to a fragment spread."""
    FRAGMENT_SPREAD
    """Location adjacent to an inline fragment."""
    INLINE_FRAGMENT
    """Location adjacent to a schema definition."""
    SCHEMA
    """Location adjacent to a scalar definition."""
    SCALAR
    """Location adjacent to an object type definition."""
    OBJECT
    """Location adjacent to a field definition."""
    FIELD_DEFINITION
    """Location adjacent to an argument definition."""
    ARGUMENT_DEFINITION
    """Location adjacent to an interface definition."""
    INTERFACE
    """Location adjacent to a union definition."""
    UNION
    """Location adjacent to an enum definition."""
    ENUM
    """Location adjacent to an enum value definition."""
    ENUM_VALUE
    """Location adjacent to an input object type definition."""
    INPUT_OBJECT
    """Location adjacent to an input object field definition."""
    INPUT_FIELD_DEFINITION
}

"""Values associated with introspection result for an enum value"""
type IntrospectionEnumValue {
    name: String!
    description: String
    isDeprecated: Boolean!
    depreactionReason: String @deprecated(reason: "Use deprecationReason instead")
    deprecationReason: String
}

"""__EnumValue introspection type"""
input IntrospectionEnumValueInput {
    name: String!
    description: String
    isDeprecated: Boolean!
    deprecationReason: String
}

"""Values associated with introspection result for field"""
type IntrospectionField {
    name: String!
    """This field is for internal use only"""
    parentTypeName: String!
    """This field is for internal use only"""
    schemaTag: String!
    """This field is for internal use only"""
    graphId: String!
    description: String
    args: [IntrospectionInputValue!]!
    type: IntrospectionType!
    isDeprecated: Boolean!
    deprecationReason: String
    lastUsed(from: Timestamp!, to: Timestamp): Timestamp
}

"""__Field introspection type"""
input IntrospectionFieldInput {
    name: String!
    description: String
    args: [IntrospectionInputValueInput!]!
    type: IntrospectionTypeInput!
    isDeprecated: Boolean!
    deprecationReason: String
}

"""Values associated with introspection result for an input field"""
type IntrospectionInputValue {
    name: String!
    description: String
    type: IntrospectionType!
    defaultValue: String
}

"""__Value introspection type"""
input IntrospectionInputValueInput {
    name: String!
    description: String
    type: IntrospectionTypeInput!
    defaultValue: String
}

type IntrospectionSchema {
    types(filter: TypeFilterConfig = {includeAbstractTypes: true, includeBuiltInTypes: true, includeIntrospectionTypes: true}): [IntrospectionType!]!
    queryType: IntrospectionType!
    mutationType: IntrospectionType
    subscriptionType: IntrospectionType
    directives: [IntrospectionDirective!]!
}

"""__Schema introspection type"""
input IntrospectionSchemaInput {
    types: [IntrospectionTypeInput!]
    queryType: IntrospectionTypeRefInput!
    mutationType: IntrospectionTypeRefInput
    subscriptionType: IntrospectionTypeRefInput
    directives: [IntrospectionDirectiveInput!]!
    description: String
}

"""Object containing all possible values for an introspectionType"""
type IntrospectionType {
    kind: IntrospectionTypeKind
    name: String
    """printed representation of type, including nested nullability and list ofTypes"""
    printed: String!
    """the base kind of the type this references, ignoring lists and nullability"""
    baseKind: IntrospectionTypeKind
    description: String
    fields: [IntrospectionField!]
    interfaces: [IntrospectionType!]
    possibleTypes: [IntrospectionType!]
    enumValues(includeDeprecated: Boolean = false): [IntrospectionEnumValue!]
    inputFields: [IntrospectionInputValue!]
    ofType: IntrospectionType
}

"""__Type introspection type"""
input IntrospectionTypeInput {
    kind: IntrospectionTypeKind!
    name: String
    description: String
    fields: [IntrospectionFieldInput!]
    interfaces: [IntrospectionTypeInput!]
    possibleTypes: [IntrospectionTypeInput!]
    enumValues: [IntrospectionEnumValueInput!]
    inputFields: [IntrospectionInputValueInput!]
    ofType: IntrospectionTypeInput
}

enum IntrospectionTypeKind {
    """Indicates this type is a scalar."""
    SCALAR
    """Indicates this type is an object. 'fields' and 'interfaces' are valid fields."""
    OBJECT
    """
    Indicates this type is an interface. 'fields' and 'possibleTypes' are valid
    fields
    """
    INTERFACE
    """Indicates this type is a union. 'possibleTypes' is a valid field."""
    UNION
    """Indicates this type is an enum. 'enumValues' is a valid field."""
    ENUM
    """Indicates this type is an input object. 'inputFields' is a valid field."""
    INPUT_OBJECT
    """Indicates this type is a list. 'ofType' is a valid field."""
    LIST
    """Indicates this type is a non-null. 'ofType' is a valid field."""
    NON_NULL
}

"""Shallow __Type introspection type"""
input IntrospectionTypeRefInput {
    name: String!
    kind: String
}

type InvalidOperation {
    signature: ID!
    errors: [OperationValidationError!]
}

type NamedIntrospectionArg {
    name: String
    description: String
}

"""
The shared fields for a named introspection type. Currently this is returned for the
top level value affected by a change. In the future, we may update this
type to be an interface, which is extended by the more specific types:
scalar, object, input object, union, interface, and enum

For an in-depth look at where these types come from, see:
https://github.com/DefinitelyTyped/DefinitelyTyped/blob/659eb50d3/types/graphql/utilities/introspectionQuery.d.ts#L31-L37
"""
type NamedIntrospectionType {
    kind: IntrospectionTypeKind
    name: String
    description: String
}

"""
Introspection values that can be children of other types for changes, such
as input fields, objects in interfaces, enum values. In the future, this
value could become an interface to allow fields specific to the types
returned.
"""
type NamedIntrospectionValue {
    name: String
    description: String
    printedType: String
}

"""A non-federated service for a monolithic graph"""
type NonFederatedImplementingService {
    """Timestamp of when this implementing service was created"""
    createdAt: Timestamp!
    """
    Identifies which graph this non-implementing service belongs to.
    Formerly known as "service_id"
  """
    graphID: String!
    """
    Specifies which variant of a graph this implementing service belongs to".
    Formerly known as "tag"
  """
    graphVariant: String!
}

"""Arbitrary JSON object"""
scalar Object

type OperationDocument {
    """Operation document body"""
    body: String!
    """Operation name"""
    name: String
}

input OperationDocumentInput {
    """Operation document body"""
    body: String!
    """Operation name"""
    name: String
}

type OperationValidationError {
    message: String!
}

"""Schema for an implementing service with associated metadata"""
type PartialSchema {
    """The enriched sdl of a partial schema"""
    sdl: String!
    """The path of deep storage to find the raw enriched partial schema file"""
    sdlPath: String!
    """Timestamp for when the partial schema was created"""
    createdAt: Timestamp!
}

"""
Input for registering a partial schema to an implementing service.
One of the fields must be specified (validated server-side).

If a new partialSchemaSDL is passed in, this operation will store it before
creating the association.

If both the sdl and hash are specified, an error will be thrown if the provided
hash doesn't match our hash of the sdl contents
"""
input PartialSchemaInput {
    """
    Contents of the partial schema in SDL syntax, but may reference types
    that aren't defined in this document
    """
    sdl: String
    """
    Hash of the partial schema to associate; error is thrown if only the hash is
    specified and the hash has not been seen before
    """
    hash: String
}

"""query documents to validate against"""
input QueryDocumentInput {
    document: String
}

input RegisteredClientIdentityInput {
    identifier: String!
    name: String!
    version: String
}

type RegisteredOperation {
    signature: ID!
}

input RegisteredOperationInput {
    signature: ID!
    document: String
    metadata: RegisteredOperationMetadataInput
}

input RegisteredOperationMetadataInput {
    """This will be used to link existing records in Engine to a new ID."""
    engineSignature: String
}

type RegisterOperationsMutationResponse {
    registrationSuccess: Boolean!
    newOperations: [RegisteredOperation!]
    invalidOperations: [InvalidOperation!]
}

type RegistryApiKey {
    keyName: String
    token: String!
}

type Schema {
    hash: ID!
    createdAt: Timestamp!
    introspection: IntrospectionSchema!
    gitContext: GitContext
    """The number of fields; this includes user defined fields only, excluding built-in types and fields"""
    fieldCount: Int!
    """The number of types; this includes user defined types only, excluding built-in types"""
    typeCount: Int!
    document: GraphQLDocument!
}

"""Represents an error from running schema composition on a list of service definitions."""
type SchemaCompositionError {
    message: String!
    locations: [SourceLocation]!
}

type SchemaDiff {
    type: ChangeType! @deprecated(reason: "use severity instead")
    """Indication of the success of the change, either failure, warning, or notice."""
    severity: ChangeSeverity!
    """List of schema changes with associated affected clients and operations"""
    changes: [Change!]!
    """Operations affected by all changes in diff"""
    affectedQueries: [AffectedQuery!]
    """Clients affected by all changes in diff"""
    affectedClients: [AffectedClient!]
    """Number of operations that were validated during schema diff"""
    numberOfCheckedOperations: Int
    """Configuration of validation"""
    validationConfig: SchemaDiffValidationConfig
    """The tag against which this diff was created"""
    tag: String
}

type SchemaDiffValidationConfig {
    """
    delta in seconds from current time that determines the start of the window
    for reported metrics included in a schema diff. A day window from the present
    day would have a `from` value of -86400. In rare cases, this could be an ISO
    timestamp if the user passed one in on diff creation
    """
    from: Timestamp
    """
    delta in seconds from current time that determines the end of the
    window for reported metrics included in a schema diff. A day window
    from the present day would have a `to` value of -0. In rare
    cases, this could be an ISO timestamp if the user passed one in on diff
    creation
    """
    to: Timestamp
    """Minimum number of requests within the window for a query to be considered."""
    queryCountThreshold: Int
    """
    Number of requests within the window for a query to be considered, relative to
    total request count. Expected values are between 0 and 0.05 (minimum 5% of
    total request volume)
    """
    queryCountThresholdPercentage: Float
}

type SchemaTag {
    """The graph variant this schema tag belongs to."""
    variant: GraphVariant!
    tag: String! @deprecated(reason: "Please use variant { name } instead")
    schema: Schema!
    """
    Indicates the schemaTag of the schema's original upload, null if this is the
    first upload of the schema.
    """
    reversionFrom: SchemaTag
    createdAt: Timestamp!
    """
    Indicates this schema is "published" meaning that our users correspond this schema
    with a long-running or permanent initiative. Published schemas appear in the UI
    when exploring a service's schemas, and typically refer to either active environments
    with metrics (e.g. "staging") or git branches that are constantly used as a base
    (e.g. "master"). If this field is not found, the schema is "private" to Engine
    and is uploaded but not promoted to published yet. The other benefit is this makes
    for nice UX around publishing events
    """
    publishedAt: Timestamp!
    """
    List of previously uploaded SchemaTags under the same tag name, starting with
    the selected published schema record. Sorted in reverse chronological order
    by creation date (newest publish first).

    Note: This does not include the history of checked schemas
    """
    history(limit: Int! = 3, offset: Int = 0): [SchemaTag!]!
    """
    Number of tagged schemas created under the same tag name.
    Also represents the maximum size of the history's limit argument.
    """
    historyLength: Int!
    """
    Number of schemas tagged prior to this one under the same tag name, its position
    in the tag history.
    """
    historyOrder: Int!
    diffToPrevious: SchemaDiff
    gitContext: GitContext
}

type SourceLocation {
    line: Int!
    column: Int!
}

"""ISO 8601, extended format with nanoseconds, Zulu (or '[+-]seconds' for times relative to now)"""
scalar Timestamp

"""
the TypeFilterConfig is used to isolate
types, and subsequent fields, through
various configuration settings.

It defaults to filter towards user defined
types only
"""
input TypeFilterConfig {
    """include abstract types (interfaces and unions)"""
    includeAbstractTypes: Boolean = true
    """include built in scalars (i.e. Boolean, Int, etc)"""
    includeBuiltInTypes: Boolean = false
    """include reserved introspection types (i.e. __Type)"""
    includeIntrospectionTypes: Boolean = false
}

"""Response from uploading a partial schema"""
type UploadPartialSchemaResponse {
    """Hash of the partial schema"""
    partialSchemaHash: String!
}

type UploadSchemaMutationResponse {
    code: String!
    success: Boolean!
    message: String!
    tag: SchemaTag
}

type UpsertImplementingServiceResponse {
    """The upserted implementing service"""
    implementingService: FederatedImplementingService!
    """Boolean value that indicates whether the implementing service was created"""
    wasCreated: Boolean!
    """Boolean value that indicates where the implementing service was updated"""
    wasUpdated: Boolean!
}

type URI {
    """A GCS URI"""
    gcs: String!
}

type ValidateOperationsResult {
    validationResults: [ValidationResult!]!
}

enum ValidationErrorCode {
    NON_PARSEABLE_DOCUMENT
    INVALID_OPERATION
    DEPRECATED_FIELD
}

enum ValidationErrorType {
    FAILURE
    WARNING
    INVALID
}

"""
Represents a single validation error, with information relating to the error
and its respective operation
"""
type ValidationResult {
    """The type of validation error thrown - warning, failure, or invalid."""
    type: ValidationErrorType!
    """The validation result's error code"""
    code: ValidationErrorCode!
    """Description of the validation error"""
    description: String!
    """The operation related to this validation result"""
    operation: OperationDocument!
}

"""Always null"""
scalar Void

type Account {
    """
    Get an URL to which an avatar image can be uploaded. Client uploads by sending a PUT request
    with the image data to MediaUploadInfo.url. Client SHOULD set the "Content-Type" header to the
    browser-inferred MIME type, and SHOULD set the "x-apollo-content-filename" header to the
    filename, if such information is available. Client MUST set the "x-apollo-csrf-token" header to
    MediaUploadInfo.csrfToken.
    """
    avatarUpload: AvatarUploadResult
    """
    Get an image URL for the account's avatar. Note that CORS is not enabled for these URLs. The size
    argument is used for bandwidth reduction, and should be the size of the image as displayed in the
    application. Apollo's media server will downscale larger images to at least the requested size,
    but this will not happen for third-party media servers.
    """
    avatarUrl(size: Int! = 40): String
    billingInfo: BillingInfo
    channels(channelIds: [ID!]): [Channel!]
    currentPlan: BillingPlan!
    currentSubscription: BillingSubscription
    defaultPermission: UserPermission!
    hasBeenOnTrial: Boolean!
    id: ID!
    """
    Internal immutable identifier for the account. Only visible to Apollo admins (because it really
    shouldn't be used in normal client apps).
    """
    internalID: ID!
    invitations(includeAccepted: Boolean! = false): [AccountInvitation!]
    invoices: [Invoice!]
    """Token allowing to join the account using mutation{join(accountId:,token:)}}"""
    joinToken: String
    memberships: [AccountMembership!]
    name: String!
    """Number of seats currently allocated to active users"""
    occupiedSeats: Int
    provisionedAt: Timestamp
    recurlyEmail: String
    requests(from: Timestamp!, to: Timestamp!): Long!
    requestsInCurrentBillingMonth: Long!
    requestsInCurrentBillingPeriod: Long!
    roles: AccountRoles
    """How many seats would be included in your next bill, as best estimated today"""
    seatCountForNextBill: Int
    secondaryIDs: [ID!]!
    services(includeDeleted: Boolean): [Service!]!
    state: AccountState!
    stats(
        from: Timestamp!
        """Granularity of buckets. Defaults to the entire range (aggregate all data into a single durationBucket) when null."""
        resolution: Resolution
        """Defaults to the current time when null."""
        to: Timestamp
    ): AccountStatsWindow!
    subscriptions: [BillingSubscription!]!
    """
    A synchronized account tracks its members through an upstream, eg GitHub;
    invitations and member removals are only possible on accounts that are not synchronized.
    """
    synchronized: Boolean!
    users: [User!]! @deprecated(reason: "Replaced with Account.memberships.user")
}

"""Columns of AccountEdgeServerInfos."""
enum AccountEdgeServerInfosColumn {
    BOOT_ID
    EXECUTABLE_SCHEMA_ID
    LIBRARY_VERSION
    PLATFORM
    RUNTIME_VERSION
    SCHEMA_TAG
    SERVER_ID
    SERVICE_ID
    TIMESTAMP
    USER_VERSION
}

type AccountEdgeServerInfosDimensions {
    bootId: ID
    executableSchemaId: ID
    libraryVersion: String
    platform: String
    runtimeVersion: String
    schemaTag: String
    serverId: ID
    serviceId: ID
    userVersion: String
}

"""
Filter for data in AccountEdgeServerInfos. Fields with dimension names represent
equality checks. All fields are implicitly ANDed together.
"""
input AccountEdgeServerInfosFilter {
    and: [AccountEdgeServerInfosFilter!]
    """
    Selects rows whose bootId dimension equals the given value if not null. To
    query for the null value, use {in: {bootId: [null]}} instead.
    """
    bootId: ID
    """
    Selects rows whose executableSchemaId dimension equals the given value if not
    null. To query for the null value, use {in: {executableSchemaId: [null]}} instead.
    """
    executableSchemaId: ID
    in: AccountEdgeServerInfosFilterIn
    """
    Selects rows whose libraryVersion dimension equals the given value if not
    null. To query for the null value, use {in: {libraryVersion: [null]}} instead.
    """
    libraryVersion: String
    not: AccountEdgeServerInfosFilter
    or: [AccountEdgeServerInfosFilter!]
    """
    Selects rows whose platform dimension equals the given value if not null. To
    query for the null value, use {in: {platform: [null]}} instead.
    """
    platform: String
    """
    Selects rows whose runtimeVersion dimension equals the given value if not
    null. To query for the null value, use {in: {runtimeVersion: [null]}} instead.
    """
    runtimeVersion: String
    """
    Selects rows whose schemaTag dimension equals the given value if not null. To
    query for the null value, use {in: {schemaTag: [null]}} instead.
    """
    schemaTag: String
    """
    Selects rows whose serverId dimension equals the given value if not null. To
    query for the null value, use {in: {serverId: [null]}} instead.
    """
    serverId: ID
    """
    Selects rows whose serviceId dimension equals the given value if not null. To
    query for the null value, use {in: {serviceId: [null]}} instead.
    """
    serviceId: ID
    """
    Selects rows whose userVersion dimension equals the given value if not null.
    To query for the null value, use {in: {userVersion: [null]}} instead.
    """
    userVersion: String
}

"""
Filter for data in AccountEdgeServerInfos. Fields match if the corresponding
dimension's value is in the given list. All fields are implicitly ANDed together.
"""
input AccountEdgeServerInfosFilterIn {
    """
    Selects rows whose bootId dimension is in the given list. A null value in the
    list means a row with null for that dimension.
    """
    bootId: [ID]
    """
    Selects rows whose executableSchemaId dimension is in the given list. A null
    value in the list means a row with null for that dimension.
    """
    executableSchemaId: [ID]
    """
    Selects rows whose libraryVersion dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    libraryVersion: [String]
    """
    Selects rows whose platform dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    platform: [String]
    """
    Selects rows whose runtimeVersion dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    runtimeVersion: [String]
    """
    Selects rows whose schemaTag dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    schemaTag: [String]
    """
    Selects rows whose serverId dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    serverId: [ID]
    """
    Selects rows whose serviceId dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    serviceId: [ID]
    """
    Selects rows whose userVersion dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    userVersion: [String]
}

input AccountEdgeServerInfosOrderBySpec {
    column: AccountEdgeServerInfosColumn!
    direction: Ordering!
}

type AccountEdgeServerInfosRecord {
    """Dimensions of AccountEdgeServerInfos that can be grouped by."""
    groupBy: AccountEdgeServerInfosDimensions!
    """Starting segment timestamp."""
    timestamp: Timestamp!
}

"""Columns of AccountErrorStats."""
enum AccountErrorStatsColumn {
    CLIENT_NAME
    CLIENT_REFERENCE_ID
    CLIENT_VERSION
    ERRORS_COUNT
    PATH
    QUERY_ID
    QUERY_NAME
    QUERY_SIGNATURE
    REQUESTS_WITH_ERRORS_COUNT
    SCHEMA_HASH
    SCHEMA_TAG
    SERVICE_ID
    SERVICE_VERSION
    TIMESTAMP
}

type AccountErrorStatsDimensions {
    clientName: String
    clientReferenceId: ID
    clientVersion: String
    path: String
    queryId: ID
    queryName: String
    querySignature: String
    schemaHash: String
    schemaTag: String
    serviceId: ID
    serviceVersion: String
}

"""
Filter for data in AccountErrorStats. Fields with dimension names represent
equality checks. All fields are implicitly ANDed together.
"""
input AccountErrorStatsFilter {
    and: [AccountErrorStatsFilter!]
    """
    Selects rows whose clientName dimension equals the given value if not null. To
    query for the null value, use {in: {clientName: [null]}} instead.
    """
    clientName: String
    """
    Selects rows whose clientReferenceId dimension equals the given value if not
    null. To query for the null value, use {in: {clientReferenceId: [null]}} instead.
    """
    clientReferenceId: ID
    """
    Selects rows whose clientVersion dimension equals the given value if not null.
    To query for the null value, use {in: {clientVersion: [null]}} instead.
    """
    clientVersion: String
    in: AccountErrorStatsFilterIn
    not: AccountErrorStatsFilter
    or: [AccountErrorStatsFilter!]
    """
    Selects rows whose path dimension equals the given value if not null. To query
    for the null value, use {in: {path: [null]}} instead.
    """
    path: String
    """
    Selects rows whose queryId dimension equals the given value if not null. To
    query for the null value, use {in: {queryId: [null]}} instead.
    """
    queryId: ID
    """
    Selects rows whose queryName dimension equals the given value if not null. To
    query for the null value, use {in: {queryName: [null]}} instead.
    """
    queryName: String
    """
    Selects rows whose schemaHash dimension equals the given value if not null. To
    query for the null value, use {in: {schemaHash: [null]}} instead.
    """
    schemaHash: String
    """
    Selects rows whose schemaTag dimension equals the given value if not null. To
    query for the null value, use {in: {schemaTag: [null]}} instead.
    """
    schemaTag: String
    """
    Selects rows whose serviceId dimension equals the given value if not null. To
    query for the null value, use {in: {serviceId: [null]}} instead.
    """
    serviceId: ID
    """
    Selects rows whose serviceVersion dimension equals the given value if not
    null. To query for the null value, use {in: {serviceVersion: [null]}} instead.
    """
    serviceVersion: String
}

"""
Filter for data in AccountErrorStats. Fields match if the corresponding
dimension's value is in the given list. All fields are implicitly ANDed together.
"""
input AccountErrorStatsFilterIn {
    """
    Selects rows whose clientName dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    clientName: [String]
    """
    Selects rows whose clientReferenceId dimension is in the given list. A null
    value in the list means a row with null for that dimension.
    """
    clientReferenceId: [ID]
    """
    Selects rows whose clientVersion dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    clientVersion: [String]
    """Selects rows whose path dimension is in the given list. A null value in the list means a row with null for that dimension."""
    path: [String]
    """
    Selects rows whose queryId dimension is in the given list. A null value in the
    list means a row with null for that dimension.
    """
    queryId: [ID]
    """
    Selects rows whose queryName dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    queryName: [String]
    """
    Selects rows whose schemaHash dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    schemaHash: [String]
    """
    Selects rows whose schemaTag dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    schemaTag: [String]
    """
    Selects rows whose serviceId dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    serviceId: [ID]
    """
    Selects rows whose serviceVersion dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    serviceVersion: [String]
}

type AccountErrorStatsMetrics {
    errorsCount: Long!
    requestsWithErrorsCount: Long!
}

input AccountErrorStatsOrderBySpec {
    column: AccountErrorStatsColumn!
    direction: Ordering!
}

type AccountErrorStatsRecord {
    """Dimensions of AccountErrorStats that can be grouped by."""
    groupBy: AccountErrorStatsDimensions!
    """Metrics of AccountErrorStats that can be aggregated over."""
    metrics: AccountErrorStatsMetrics!
    """Starting segment timestamp."""
    timestamp: Timestamp!
}

"""Columns of AccountFieldStats."""
enum AccountFieldStatsColumn {
    CLIENT_NAME
    CLIENT_REFERENCE_ID
    CLIENT_VERSION
    ERRORS_COUNT
    FIELD
    FIELD_HISTOGRAM
    QUERY_ID
    QUERY_NAME
    SCHEMA_HASH
    SCHEMA_TAG
    SERVICE_ID
    SERVICE_VERSION
    TIMESTAMP
}

type AccountFieldStatsDimensions {
    clientName: String
    clientReferenceId: ID
    clientVersion: String
    field: String
    queryId: ID
    queryName: String
    schemaHash: String
    schemaTag: String
    serviceId: ID
    serviceVersion: String
}

"""
Filter for data in AccountFieldStats. Fields with dimension names represent
equality checks. All fields are implicitly ANDed together.
"""
input AccountFieldStatsFilter {
    and: [AccountFieldStatsFilter!]
    """
    Selects rows whose clientName dimension equals the given value if not null. To
    query for the null value, use {in: {clientName: [null]}} instead.
    """
    clientName: String
    """
    Selects rows whose clientReferenceId dimension equals the given value if not
    null. To query for the null value, use {in: {clientReferenceId: [null]}} instead.
    """
    clientReferenceId: ID
    """
    Selects rows whose clientVersion dimension equals the given value if not null.
    To query for the null value, use {in: {clientVersion: [null]}} instead.
    """
    clientVersion: String
    """
    Selects rows whose field dimension equals the given value if not null. To
    query for the null value, use {in: {field: [null]}} instead.
    """
    field: String
    in: AccountFieldStatsFilterIn
    not: AccountFieldStatsFilter
    or: [AccountFieldStatsFilter!]
    """
    Selects rows whose queryId dimension equals the given value if not null. To
    query for the null value, use {in: {queryId: [null]}} instead.
    """
    queryId: ID
    """
    Selects rows whose queryName dimension equals the given value if not null. To
    query for the null value, use {in: {queryName: [null]}} instead.
    """
    queryName: String
    """
    Selects rows whose schemaHash dimension equals the given value if not null. To
    query for the null value, use {in: {schemaHash: [null]}} instead.
    """
    schemaHash: String
    """
    Selects rows whose schemaTag dimension equals the given value if not null. To
    query for the null value, use {in: {schemaTag: [null]}} instead.
    """
    schemaTag: String
    """
    Selects rows whose serviceId dimension equals the given value if not null. To
    query for the null value, use {in: {serviceId: [null]}} instead.
    """
    serviceId: ID
    """
    Selects rows whose serviceVersion dimension equals the given value if not
    null. To query for the null value, use {in: {serviceVersion: [null]}} instead.
    """
    serviceVersion: String
}

"""
Filter for data in AccountFieldStats. Fields match if the corresponding
dimension's value is in the given list. All fields are implicitly ANDed together.
"""
input AccountFieldStatsFilterIn {
    """
    Selects rows whose clientName dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    clientName: [String]
    """
    Selects rows whose clientReferenceId dimension is in the given list. A null
    value in the list means a row with null for that dimension.
    """
    clientReferenceId: [ID]
    """
    Selects rows whose clientVersion dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    clientVersion: [String]
    """
    Selects rows whose field dimension is in the given list. A null value in the
    list means a row with null for that dimension.
    """
    field: [String]
    """
    Selects rows whose queryId dimension is in the given list. A null value in the
    list means a row with null for that dimension.
    """
    queryId: [ID]
    """
    Selects rows whose queryName dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    queryName: [String]
    """
    Selects rows whose schemaHash dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    schemaHash: [String]
    """
    Selects rows whose schemaTag dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    schemaTag: [String]
    """
    Selects rows whose serviceId dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    serviceId: [ID]
    """
    Selects rows whose serviceVersion dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    serviceVersion: [String]
}

type AccountFieldStatsMetrics {
    errorsCount: Long!
    fieldHistogram: DurationHistogram!
}

input AccountFieldStatsOrderBySpec {
    column: AccountFieldStatsColumn!
    direction: Ordering!
}

type AccountFieldStatsRecord {
    """Dimensions of AccountFieldStats that can be grouped by."""
    groupBy: AccountFieldStatsDimensions!
    """Metrics of AccountFieldStats that can be aggregated over."""
    metrics: AccountFieldStatsMetrics!
    """Starting segment timestamp."""
    timestamp: Timestamp!
}

type AccountInvitation {
    """An accepted invitation cannot be used anymore"""
    acceptedAt: Timestamp
    """Who accepted the invitation"""
    acceptedBy: User
    """Time the invitation was created"""
    createdAt: Timestamp!
    """Who created the invitation"""
    createdBy: User
    email: String!
    id: ID!
    """Last time we sent an email for the invitation"""
    lastSentAt: Timestamp
}

type AccountMembership {
    createdAt: Timestamp!
    permission: UserPermission!
    user: User!
}

type AccountMutation {
    """Delete the account's avatar. Requires Account.canUpdateAvatar to be true."""
    deleteAvatar: AvatarDeleteError
    """Delete an existing channel"""
    deleteChannel(id: ID!): Boolean!
    """Hard delete an account and all associated services"""
    hardDelete: Void
    """Send an invitation to join the account by E-mail"""
    invite(email: String!): AccountInvitation
    """Refresh billing information from third-party billing service"""
    refreshBilling: Void
    """Set the account-wide invitation token to a new random value"""
    regenerateJoinToken: Account
    """Delete an invitation"""
    removeInvitation(id: ID): Void
    """Remove a member of the account"""
    removeMember(id: ID!): Account
    """Send a new E-mail for an existing invitation"""
    resendInvitation(id: ID): AccountInvitation
    """Disable the account-wide join token"""
    revokeJoinToken: Account
    """Set the billing plan"""
    setPlan(id: ID!): Void
    """Terminate any ongoing subscriptions in the account, without refunds"""
    terminateSubscriptions: Account
    """Test Slack notification channel"""
    testSlackChannel(id: ID!, notification: SlackNotificationInput!): Void
    """Update the billing address for a Recurly token"""
    updateBillingAddress(billingAddress: BillingAddressInput!): Account
    """Update the billing information from a Recurly token"""
    updateBillingInfo(token: String!): Void
    """Set the E-mail address of the account, used notably for billing"""
    updateEmail(email: String!): Void
    """Update the account ID"""
    updateID(id: ID!): Account
    """Update the company name"""
    updateName(name: String!): Void
    """Set the E-mail address in Recurly"""
    updateRecurlyEmail(email: String!): Void @deprecated(reason: "Replaced with updateEmail")
    """Create/update PagerDuty notification channel"""
    upsertPagerDutyChannel(channel: PagerDutyChannelInput!, id: ID): PagerDutyChannel
    """Create/update Slack notification channel"""
    upsertSlackChannel(channel: SlackChannelInput!, id: ID): SlackChannel
}

"""Columns of AccountQueryStats."""
enum AccountQueryStatsColumn {
    CACHED_HISTOGRAM
    CACHED_REQUESTS_COUNT
    CACHE_TTL_HISTOGRAM
    CLIENT_NAME
    CLIENT_REFERENCE_ID
    CLIENT_VERSION
    FORBIDDEN_OPERATION_COUNT
    FROM_ENGINEPROXY
    QUERY_ID
    QUERY_NAME
    QUERY_SIGNATURE
    REGISTERED_OPERATION_COUNT
    REQUESTS_WITH_ERRORS_COUNT
    SCHEMA_HASH
    SCHEMA_TAG
    SERVICE_ID
    SERVICE_VERSION
    TIMESTAMP
    UNCACHED_HISTOGRAM
    UNCACHED_REQUESTS_COUNT
}

type AccountQueryStatsDimensions {
    clientName: String
    clientReferenceId: ID
    clientVersion: String
    fromEngineproxy: String
    queryId: ID
    queryName: String
    querySignature: String
    schemaHash: String
    schemaTag: String
    serviceId: ID
    serviceVersion: String
}

"""
Filter for data in AccountQueryStats. Fields with dimension names represent
equality checks. All fields are implicitly ANDed together.
"""
input AccountQueryStatsFilter {
    and: [AccountQueryStatsFilter!]
    """
    Selects rows whose clientName dimension equals the given value if not null. To
    query for the null value, use {in: {clientName: [null]}} instead.
    """
    clientName: String
    """
    Selects rows whose clientReferenceId dimension equals the given value if not
    null. To query for the null value, use {in: {clientReferenceId: [null]}} instead.
    """
    clientReferenceId: ID
    """
    Selects rows whose clientVersion dimension equals the given value if not null.
    To query for the null value, use {in: {clientVersion: [null]}} instead.
    """
    clientVersion: String
    """
    Selects rows whose fromEngineproxy dimension equals the given value if not
    null. To query for the null value, use {in: {fromEngineproxy: [null]}} instead.
    """
    fromEngineproxy: String
    in: AccountQueryStatsFilterIn
    not: AccountQueryStatsFilter
    or: [AccountQueryStatsFilter!]
    """
    Selects rows whose queryId dimension equals the given value if not null. To
    query for the null value, use {in: {queryId: [null]}} instead.
    """
    queryId: ID
    """
    Selects rows whose queryName dimension equals the given value if not null. To
    query for the null value, use {in: {queryName: [null]}} instead.
    """
    queryName: String
    """
    Selects rows whose schemaHash dimension equals the given value if not null. To
    query for the null value, use {in: {schemaHash: [null]}} instead.
    """
    schemaHash: String
    """
    Selects rows whose schemaTag dimension equals the given value if not null. To
    query for the null value, use {in: {schemaTag: [null]}} instead.
    """
    schemaTag: String
    """
    Selects rows whose serviceId dimension equals the given value if not null. To
    query for the null value, use {in: {serviceId: [null]}} instead.
    """
    serviceId: ID
    """
    Selects rows whose serviceVersion dimension equals the given value if not
    null. To query for the null value, use {in: {serviceVersion: [null]}} instead.
    """
    serviceVersion: String
}

"""
Filter for data in AccountQueryStats. Fields match if the corresponding
dimension's value is in the given list. All fields are implicitly ANDed together.
"""
input AccountQueryStatsFilterIn {
    """
    Selects rows whose clientName dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    clientName: [String]
    """
    Selects rows whose clientReferenceId dimension is in the given list. A null
    value in the list means a row with null for that dimension.
    """
    clientReferenceId: [ID]
    """
    Selects rows whose clientVersion dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    clientVersion: [String]
    """
    Selects rows whose fromEngineproxy dimension is in the given list. A null
    value in the list means a row with null for that dimension.
    """
    fromEngineproxy: [String]
    """
    Selects rows whose queryId dimension is in the given list. A null value in the
    list means a row with null for that dimension.
    """
    queryId: [ID]
    """
    Selects rows whose queryName dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    queryName: [String]
    """
    Selects rows whose schemaHash dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    schemaHash: [String]
    """
    Selects rows whose schemaTag dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    schemaTag: [String]
    """
    Selects rows whose serviceId dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    serviceId: [ID]
    """
    Selects rows whose serviceVersion dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    serviceVersion: [String]
}

type AccountQueryStatsMetrics {
    cacheTtlHistogram: DurationHistogram!
    cachedHistogram: DurationHistogram!
    cachedRequestsCount: Long!
    forbiddenOperationCount: Long!
    registeredOperationCount: Long!
    requestsWithErrorsCount: Long!
    totalLatencyHistogram: DurationHistogram!
    uncachedHistogram: DurationHistogram!
    uncachedRequestsCount: Long!
}

input AccountQueryStatsOrderBySpec {
    column: AccountQueryStatsColumn!
    direction: Ordering!
}

type AccountQueryStatsRecord {
    """Dimensions of AccountQueryStats that can be grouped by."""
    groupBy: AccountQueryStatsDimensions!
    """Metrics of AccountQueryStats that can be aggregated over."""
    metrics: AccountQueryStatsMetrics!
    """Starting segment timestamp."""
    timestamp: Timestamp!
}

type AccountRoles {
    canAdminister: Boolean
    canCreateService: Boolean
    canDelete: Boolean
    canDownloadInvoice: Boolean
    canModify: Boolean
    canQuery: Boolean
    canQueryBillingInfo: Boolean
    canQueryChannels: Boolean
    canQueryInvoices: Boolean
    canQueryJoinToken: Boolean
    canQueryMembers: Boolean
    canQueryRecurlyInfo: Boolean
    canUpdateAvatar: Boolean
    canUpdateBillingInfo: Boolean
    canUpdateID: Boolean
}

enum AccountState {
    ACTIVE
    CLOSED
    UNKNOWN
    UNPROVISIONED
}

"""A time window with a specified granularity over a given account."""
type AccountStatsWindow {
    edgeServerInfos(
        """Filter to select what rows to return."""
        filter: AccountEdgeServerInfosFilter
        """The maximum number of entries to return, cannot be more than 15000."""
        limit: Int = 10000
        """
        A list of OrderBySpecs to order AccountEdgeServerInfos by. The earlier an
        OrderBySpec appears in the list, the higher priority it has in the final
        ordering. When empty or null, defaults to sorting by ascending timestamp.
        """
        orderBy: [AccountEdgeServerInfosOrderBySpec!]
    ): [AccountEdgeServerInfosRecord!]!
    errorStats(
        """Filter to select what rows to return."""
        filter: AccountErrorStatsFilter
        """The maximum number of entries to return, cannot be more than 15000."""
        limit: Int = 10000
        """
        A list of OrderBySpecs to order AccountErrorStats by. The earlier an
        OrderBySpec appears in the list, the higher priority it has in the final
        ordering. When empty or null, defaults to sorting by ascending timestamp.
        """
        orderBy: [AccountErrorStatsOrderBySpec!]
    ): [AccountErrorStatsRecord!]!
    fieldStats(
        """Filter to select what rows to return."""
        filter: AccountFieldStatsFilter
        """The maximum number of entries to return, cannot be more than 15000."""
        limit: Int = 10000
        """
        A list of OrderBySpecs to order AccountFieldStats by. The earlier an
        OrderBySpec appears in the list, the higher priority it has in the final
        ordering. When empty or null, defaults to sorting by ascending timestamp.
        """
        orderBy: [AccountFieldStatsOrderBySpec!]
    ): [AccountFieldStatsRecord!]!
    queryStats(
        """Filter to select what rows to return."""
        filter: AccountQueryStatsFilter
        """The maximum number of entries to return, cannot be more than 15000."""
        limit: Int = 10000
        """
        A list of OrderBySpecs to order AccountQueryStats by. The earlier an
        OrderBySpec appears in the list, the higher priority it has in the final
        ordering. When empty or null, defaults to sorting by ascending timestamp.
        """
        orderBy: [AccountQueryStatsOrderBySpec!]
    ): [AccountQueryStatsRecord!]!
    """From field rounded down to the nearest resolution."""
    roundedDownFrom: Timestamp!
    """To field rounded up to the nearest resolution."""
    roundedUpTo: Timestamp!
    tracePathErrorsRefs(
        """Filter to select what rows to return."""
        filter: AccountTracePathErrorsRefsFilter
        """The maximum number of entries to return, cannot be more than 15000."""
        limit: Int = 10000
        """
        A list of OrderBySpecs to order AccountTracePathErrorsRefs by. The earlier
        an OrderBySpec appears in the list, the higher priority it has in the final
        ordering. When empty or null, defaults to sorting by ascending timestamp.
        """
        orderBy: [AccountTracePathErrorsRefsOrderBySpec!]
    ): [AccountTracePathErrorsRefsRecord!]!
    traceRefs(
        """Filter to select what rows to return."""
        filter: AccountTraceRefsFilter
        """The maximum number of entries to return, cannot be more than 15000."""
        limit: Int = 10000
        """
        A list of OrderBySpecs to order AccountTraceRefs by. The earlier an
        OrderBySpec appears in the list, the higher priority it has in the final
        ordering. When empty or null, defaults to sorting by ascending timestamp.
        """
        orderBy: [AccountTraceRefsOrderBySpec!]
    ): [AccountTraceRefsRecord!]!
}

"""Columns of AccountTracePathErrorsRefs."""
enum AccountTracePathErrorsRefsColumn {
    CLIENT_NAME
    CLIENT_REFERENCE_ID
    CLIENT_VERSION
    DURATION_BUCKET
    ERRORS_COUNT_IN_PATH
    ERRORS_COUNT_IN_TRACE
    ERROR_MESSAGE
    GCS_BUCKET
    PATH
    QUERY_ID
    QUERY_NAME
    QUERY_SIGNATURE
    SCHEMA_HASH
    SCHEMA_TAG
    SERVICE_ID
    SERVICE_VERSION
    TIMESTAMP
    TRACE_HTTP_STATUS_CODE
    TRACE_ID
    TRACE_SIZE_BYTES
    TRACE_STARTS_AT
}

type AccountTracePathErrorsRefsDimensions {
    clientName: String
    clientReferenceId: ID
    clientVersion: String
    durationBucket: Int
    errorMessage: String
    gcsBucket: String
    path: String
    queryId: ID
    queryName: String
    querySignature: String
    schemaHash: String
    schemaTag: String
    serviceId: ID
    serviceVersion: String
    traceHttpStatusCode: Int
    traceId: ID
    traceStartsAt: Timestamp
}

"""
Filter for data in AccountTracePathErrorsRefs. Fields with dimension names
represent equality checks. All fields are implicitly ANDed together.
"""
input AccountTracePathErrorsRefsFilter {
    and: [AccountTracePathErrorsRefsFilter!]
    """
    Selects rows whose clientName dimension equals the given value if not null. To
    query for the null value, use {in: {clientName: [null]}} instead.
    """
    clientName: String
    """
    Selects rows whose clientReferenceId dimension equals the given value if not
    null. To query for the null value, use {in: {clientReferenceId: [null]}} instead.
    """
    clientReferenceId: ID
    """
    Selects rows whose clientVersion dimension equals the given value if not null.
    To query for the null value, use {in: {clientVersion: [null]}} instead.
    """
    clientVersion: String
    """
    Selects rows whose durationBucket dimension equals the given value if not
    null. To query for the null value, use {in: {durationBucket: [null]}} instead.
    """
    durationBucket: Int
    """
    Selects rows whose errorMessage dimension equals the given value if not null.
    To query for the null value, use {in: {errorMessage: [null]}} instead.
    """
    errorMessage: String
    """
    Selects rows whose gcsBucket dimension equals the given value if not null. To
    query for the null value, use {in: {gcsBucket: [null]}} instead.
    """
    gcsBucket: String
    in: AccountTracePathErrorsRefsFilterIn
    not: AccountTracePathErrorsRefsFilter
    or: [AccountTracePathErrorsRefsFilter!]
    """
    Selects rows whose path dimension equals the given value if not null. To query
    for the null value, use {in: {path: [null]}} instead.
    """
    path: String
    """
    Selects rows whose queryId dimension equals the given value if not null. To
    query for the null value, use {in: {queryId: [null]}} instead.
    """
    queryId: ID
    """
    Selects rows whose queryName dimension equals the given value if not null. To
    query for the null value, use {in: {queryName: [null]}} instead.
    """
    queryName: String
    """
    Selects rows whose schemaHash dimension equals the given value if not null. To
    query for the null value, use {in: {schemaHash: [null]}} instead.
    """
    schemaHash: String
    """
    Selects rows whose schemaTag dimension equals the given value if not null. To
    query for the null value, use {in: {schemaTag: [null]}} instead.
    """
    schemaTag: String
    """
    Selects rows whose serviceId dimension equals the given value if not null. To
    query for the null value, use {in: {serviceId: [null]}} instead.
    """
    serviceId: ID
    """
    Selects rows whose serviceVersion dimension equals the given value if not
    null. To query for the null value, use {in: {serviceVersion: [null]}} instead.
    """
    serviceVersion: String
    """
    Selects rows whose traceHttpStatusCode dimension equals the given value if not
    null. To query for the null value, use {in: {traceHttpStatusCode: [null]}} instead.
    """
    traceHttpStatusCode: Int
    """
    Selects rows whose traceId dimension equals the given value if not null. To
    query for the null value, use {in: {traceId: [null]}} instead.
    """
    traceId: ID
}

"""
Filter for data in AccountTracePathErrorsRefs. Fields match if the corresponding
dimension's value is in the given list. All fields are implicitly ANDed together.
"""
input AccountTracePathErrorsRefsFilterIn {
    """
    Selects rows whose clientName dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    clientName: [String]
    """
    Selects rows whose clientReferenceId dimension is in the given list. A null
    value in the list means a row with null for that dimension.
    """
    clientReferenceId: [ID]
    """
    Selects rows whose clientVersion dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    clientVersion: [String]
    """
    Selects rows whose durationBucket dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    durationBucket: [Int]
    """
    Selects rows whose errorMessage dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    errorMessage: [String]
    """
    Selects rows whose gcsBucket dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    gcsBucket: [String]
    """Selects rows whose path dimension is in the given list. A null value in the list means a row with null for that dimension."""
    path: [String]
    """
    Selects rows whose queryId dimension is in the given list. A null value in the
    list means a row with null for that dimension.
    """
    queryId: [ID]
    """
    Selects rows whose queryName dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    queryName: [String]
    """
    Selects rows whose schemaHash dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    schemaHash: [String]
    """
    Selects rows whose schemaTag dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    schemaTag: [String]
    """
    Selects rows whose serviceId dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    serviceId: [ID]
    """
    Selects rows whose serviceVersion dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    serviceVersion: [String]
    """
    Selects rows whose traceHttpStatusCode dimension is in the given list. A null
    value in the list means a row with null for that dimension.
    """
    traceHttpStatusCode: [Int]
    """
    Selects rows whose traceId dimension is in the given list. A null value in the
    list means a row with null for that dimension.
    """
    traceId: [ID]
}

type AccountTracePathErrorsRefsMetrics {
    errorsCountInPath: Long!
    errorsCountInTrace: Long!
    traceSizeBytes: Long!
}

input AccountTracePathErrorsRefsOrderBySpec {
    column: AccountTracePathErrorsRefsColumn!
    direction: Ordering!
}

type AccountTracePathErrorsRefsRecord {
    """Dimensions of AccountTracePathErrorsRefs that can be grouped by."""
    groupBy: AccountTracePathErrorsRefsDimensions!
    """Metrics of AccountTracePathErrorsRefs that can be aggregated over."""
    metrics: AccountTracePathErrorsRefsMetrics!
    """Starting segment timestamp."""
    timestamp: Timestamp!
}

"""Columns of AccountTraceRefs."""
enum AccountTraceRefsColumn {
    CLIENT_NAME
    CLIENT_REFERENCE_ID
    CLIENT_VERSION
    DURATION_BUCKET
    DURATION_NS
    GCS_BUCKET
    QUERY_ID
    QUERY_NAME
    QUERY_SIGNATURE
    SCHEMA_HASH
    SCHEMA_TAG
    SERVICE_ID
    SERVICE_VERSION
    TIMESTAMP
    TRACE_ID
    TRACE_SIZE_BYTES
}

type AccountTraceRefsDimensions {
    clientName: String
    clientReferenceId: ID
    clientVersion: String
    durationBucket: Int
    gcsBucket: String
    queryId: ID
    queryName: String
    querySignature: String
    schemaHash: String
    schemaTag: String
    serviceId: ID
    serviceVersion: String
    traceId: ID
}

"""
Filter for data in AccountTraceRefs. Fields with dimension names represent
equality checks. All fields are implicitly ANDed together.
"""
input AccountTraceRefsFilter {
    and: [AccountTraceRefsFilter!]
    """
    Selects rows whose clientName dimension equals the given value if not null. To
    query for the null value, use {in: {clientName: [null]}} instead.
    """
    clientName: String
    """
    Selects rows whose clientReferenceId dimension equals the given value if not
    null. To query for the null value, use {in: {clientReferenceId: [null]}} instead.
    """
    clientReferenceId: ID
    """
    Selects rows whose clientVersion dimension equals the given value if not null.
    To query for the null value, use {in: {clientVersion: [null]}} instead.
    """
    clientVersion: String
    """
    Selects rows whose durationBucket dimension equals the given value if not
    null. To query for the null value, use {in: {durationBucket: [null]}} instead.
    """
    durationBucket: Int
    """
    Selects rows whose gcsBucket dimension equals the given value if not null. To
    query for the null value, use {in: {gcsBucket: [null]}} instead.
    """
    gcsBucket: String
    in: AccountTraceRefsFilterIn
    not: AccountTraceRefsFilter
    or: [AccountTraceRefsFilter!]
    """
    Selects rows whose queryId dimension equals the given value if not null. To
    query for the null value, use {in: {queryId: [null]}} instead.
    """
    queryId: ID
    """
    Selects rows whose queryName dimension equals the given value if not null. To
    query for the null value, use {in: {queryName: [null]}} instead.
    """
    queryName: String
    """
    Selects rows whose schemaHash dimension equals the given value if not null. To
    query for the null value, use {in: {schemaHash: [null]}} instead.
    """
    schemaHash: String
    """
    Selects rows whose schemaTag dimension equals the given value if not null. To
    query for the null value, use {in: {schemaTag: [null]}} instead.
    """
    schemaTag: String
    """
    Selects rows whose serviceId dimension equals the given value if not null. To
    query for the null value, use {in: {serviceId: [null]}} instead.
    """
    serviceId: ID
    """
    Selects rows whose serviceVersion dimension equals the given value if not
    null. To query for the null value, use {in: {serviceVersion: [null]}} instead.
    """
    serviceVersion: String
    """
    Selects rows whose traceId dimension equals the given value if not null. To
    query for the null value, use {in: {traceId: [null]}} instead.
    """
    traceId: ID
}

"""
Filter for data in AccountTraceRefs. Fields match if the corresponding
dimension's value is in the given list. All fields are implicitly ANDed together.
"""
input AccountTraceRefsFilterIn {
    """
    Selects rows whose clientName dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    clientName: [String]
    """
    Selects rows whose clientReferenceId dimension is in the given list. A null
    value in the list means a row with null for that dimension.
    """
    clientReferenceId: [ID]
    """
    Selects rows whose clientVersion dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    clientVersion: [String]
    """
    Selects rows whose durationBucket dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    durationBucket: [Int]
    """
    Selects rows whose gcsBucket dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    gcsBucket: [String]
    """
    Selects rows whose queryId dimension is in the given list. A null value in the
    list means a row with null for that dimension.
    """
    queryId: [ID]
    """
    Selects rows whose queryName dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    queryName: [String]
    """
    Selects rows whose schemaHash dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    schemaHash: [String]
    """
    Selects rows whose schemaTag dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    schemaTag: [String]
    """
    Selects rows whose serviceId dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    serviceId: [ID]
    """
    Selects rows whose serviceVersion dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    serviceVersion: [String]
    """
    Selects rows whose traceId dimension is in the given list. A null value in the
    list means a row with null for that dimension.
    """
    traceId: [ID]
}

type AccountTraceRefsMetrics {
    durationNs: Long!
    traceSizeBytes: Long!
}

input AccountTraceRefsOrderBySpec {
    column: AccountTraceRefsColumn!
    direction: Ordering!
}

type AccountTraceRefsRecord {
    """Dimensions of AccountTraceRefs that can be grouped by."""
    groupBy: AccountTraceRefsDimensions!
    """Metrics of AccountTraceRefs that can be aggregated over."""
    metrics: AccountTraceRefsMetrics!
    """Starting segment timestamp."""
    timestamp: Timestamp!
}

type Actor {
    actorId: ID!
    type: ActorType!
}

enum ActorType {
    ANONYMOUS_USER
    BACKFILL
    CRON
    GRAPH
    INTERNAL_IDENTITY
    USER
}

type ApiKey {
    keyName: String
    token: String!
}

type ApiKeyProvision {
    apiKey: ApiKey!
    created: Boolean!
}

type AvatarDeleteError {
    clientMessage: String!
    code: AvatarDeleteErrorCode!
    serverMessage: String!
}

enum AvatarDeleteErrorCode {
    NETFLIX_USERS_CANNOT_DELETE_ACCOUNT_AVATAR
    SSO_USERS_CANNOT_DELETE_SELF_AVATAR
}

type AvatarUploadError {
    clientMessage: String!
    code: AvatarUploadErrorCode!
    serverMessage: String!
}

enum AvatarUploadErrorCode {
    NETFLIX_USERS_CANNOT_UPLOAD_ACCOUNT_AVATAR
    SSO_USERS_CANNOT_UPLOAD_SELF_AVATAR
}

union AvatarUploadResult = AvatarUploadError | MediaUploadInfo

type BillingAddress {
    address1: String
    address2: String
    city: String
    country: String
    state: String
    zip: String
}

"""Billing address inpnut"""
input BillingAddressInput {
    address1: String!
    address2: String
    city: String!
    country: String!
    state: String!
    zip: String!
}

type BillingInfo {
    address: BillingAddress!
    cardType: String
    firstName: String
    lastFour: Int
    lastName: String
    month: Int
    year: Int
}

enum BillingModel {
    REQUEST_BASED
    SEAT_BASED
}

enum BillingPeriod {
    MONTHLY
    QUARTERLY
    YEARLY
}

type BillingPlan {
    addons: [BillingPlanAddon!]!
    billingModel: BillingModel!
    billingPeriod: BillingPeriod
    capabilities: BillingPlanCapabilities!
    description: String
    id: ID!
    isTrial: Boolean!
    """Whether this plan is an upgrade option and requires billing information"""
    isUpgradeOption: Boolean!
    name: String!
    """The price of every seat"""
    pricePerSeatInUsdCents: Int
    """The price of subscribing to this plan with a quantity of 1 (currently always the case)"""
    pricePerUnitInUsdCents: Int!
    """Whether the plan is accessible by all users in QueryRoot.allPlans, QueryRoot.plan, or AccountMutation.setPlan"""
    public: Boolean!
    tier: BillingPlanTier!
    trialPeriodDays: Int
}

type BillingPlanAddon {
    id: ID!
    pricePerUnitInUsdCents: Int!
}

type BillingPlanCapabilities {
    clients: Boolean!
    datadog: Boolean!
    errors: Boolean!
    federation: Boolean!
    maxRangeInDays: Int
    maxRequestsPerMonth: Long
    metrics: Boolean!
    notifications: Boolean!
    operationRegistry: Boolean!
    ranges: [String!]!
    schemaValidation: Boolean!
    traces: Boolean!
}

enum BillingPlanTier {
    COMMUNITY
    ENTERPRISE
    PRO
    TEAM
}

type BillingSubscription {
    activatedAt: Timestamp!
    addons: [BillingSubscriptionAddon!]!
    """The price of the subscription when ignoring add-ons (such as seats), ie quantity * pricePerUnitInUsdCents"""
    basePriceInUsdCents: Long!
    canceledAt: Timestamp
    currentPeriodEndsAt: Timestamp!
    currentPeriodStartedAt: Timestamp!
    expiresAt: Timestamp
    plan: BillingPlan!
    """The price of every seat"""
    pricePerSeatInUsdCents: Int
    """The price of every unit in the subscription (hence multiplied by quantity to get to the basePriceInUsdCents)"""
    pricePerUnitInUsdCents: Int!
    quantity: Int!
    state: SubscriptionState!
    """Total price of the subscription, including add-ons (such as seats)"""
    totalPriceInUsdCents: Long!
    """
    When this subscription's trial period expires (if it is a trial), according to
    the trialPeriodDays flag (not the same as the subscription's Recurly expiration).
    """
    trialExpiresAt: Timestamp
    uuid: ID!
}

type BillingSubscriptionAddon {
    id: ID!
    pricePerUnitInUsdCents: Int!
    quantity: Int!
}

"""A blob (base64'ed in JSON & GraphQL)"""
scalar Blob

enum CacheScope {
    PRIVATE
    PUBLIC
    UNKNOWN
    UNRECOGNIZED
}

"""Destination for notifications"""
interface Channel {
    id: ID!
    name: String
    queryTriggers: [QueryTrigger!]!
}

enum ComparisonOperator {
    EQUALS
    GREATER_THAN
    GREATER_THAN_OR_EQUAL_TO
    LESS_THAN
    LESS_THAN_OR_EQUAL_TO
    NOT_EQUALS
    UNRECOGNIZED
}

type CronExecution {
    completedAt: Timestamp
    failure: String
    id: ID!
    job: CronJob!
    resolvedAt: Timestamp
    resolvedBy: Actor
    schedule: String!
    startedAt: Timestamp!
}

type CronJob {
    group: String!
    name: String!
    recentExecutions(n: Int): [CronExecution!]!
}

type DatadogMetricsConfig {
    apiKey: String!
    enabled: Boolean!
}

enum DeletionTargetType {
    ACCOUNT
    USER
}

type DurationHistogram {
    averageDurationMs: Float
    buckets: [DurationHistogramBucket!]!
    durationMs(
        """Percentile (between 0 and 1)"""
        percentile: Float!
    ): Float
    """Counts per durationBucket, where sequences of zeroes are replaced with the negative of their size"""
    sparseBuckets: [Long!]!
    totalCount: Long!
    totalDurationMs: Float!
}

type DurationHistogramBucket {
    count: Long!
    index: Int!
    rangeBeginMs: Float!
    rangeEndMs: Float!
}

"""Edge server info"""
input EdgeServerInfo {
    """A randomly generated UUID, immutable for the lifetime of the edge server runtime."""
    bootId: String!
    """A unique identifier for the executable GraphQL served by the edge server. length must be <= 64 characters."""
    executableSchemaId: String!
    """The graph variant, defaults to 'current'"""
    graphVariant: String! = "current"
    """
    The version of the edge server reporting agent, e.g. apollo-server-2.8,
    graphql-java-3.1, etc. length must be <= 256 characters.
    """
    libraryVersion: String
    """
    The infra environment in which this edge server is running, e.g. localhost,
    Kubernetes, AWS Lambda, Google CloudRun, AWS ECS, etc. length must be <= 256 characters.
    """
    platform: String
    """
    The runtime in which the edge server is running, e.g. node 12.03,
    zulu8.46.0.19-ca-jdk8.0.252-macosx_x64, etc. length must be <= 256 characters.
    """
    runtimeVersion: String
    """
    If available, an identifier for the edge server instance, such that when
    restarting this instance it will have the same serverId, with a different
    bootId. For example, in Kubernetes this might be the pod name. Length must be
    <= 256 characters.
    """
    serverId: String
    """
    An identifier used to distinguish the version (from the user's perspective) of
    the edge server's code itself. For instance, the git sha of the server's
    repository or the docker sha of the associated image this server runs with.
    Length must be <= 256 characters.
    """
    userVersion: String
}

"""Columns of EdgeServerInfos."""
enum EdgeServerInfosColumn {
    BOOT_ID
    EXECUTABLE_SCHEMA_ID
    LIBRARY_VERSION
    PLATFORM
    RUNTIME_VERSION
    SCHEMA_TAG
    SERVER_ID
    SERVICE_ID
    TIMESTAMP
    USER_VERSION
}

type EdgeServerInfosDimensions {
    bootId: ID
    executableSchemaId: ID
    libraryVersion: String
    platform: String
    runtimeVersion: String
    schemaTag: String
    serverId: ID
    serviceId: ID
    userVersion: String
}

"""
Filter for data in EdgeServerInfos. Fields with dimension names represent
equality checks. All fields are implicitly ANDed together.
"""
input EdgeServerInfosFilter {
    and: [EdgeServerInfosFilter!]
    """
    Selects rows whose bootId dimension equals the given value if not null. To
    query for the null value, use {in: {bootId: [null]}} instead.
    """
    bootId: ID
    """
    Selects rows whose executableSchemaId dimension equals the given value if not
    null. To query for the null value, use {in: {executableSchemaId: [null]}} instead.
    """
    executableSchemaId: ID
    in: EdgeServerInfosFilterIn
    """
    Selects rows whose libraryVersion dimension equals the given value if not
    null. To query for the null value, use {in: {libraryVersion: [null]}} instead.
    """
    libraryVersion: String
    not: EdgeServerInfosFilter
    or: [EdgeServerInfosFilter!]
    """
    Selects rows whose platform dimension equals the given value if not null. To
    query for the null value, use {in: {platform: [null]}} instead.
    """
    platform: String
    """
    Selects rows whose runtimeVersion dimension equals the given value if not
    null. To query for the null value, use {in: {runtimeVersion: [null]}} instead.
    """
    runtimeVersion: String
    """
    Selects rows whose schemaTag dimension equals the given value if not null. To
    query for the null value, use {in: {schemaTag: [null]}} instead.
    """
    schemaTag: String
    """
    Selects rows whose serverId dimension equals the given value if not null. To
    query for the null value, use {in: {serverId: [null]}} instead.
    """
    serverId: ID
    """
    Selects rows whose serviceId dimension equals the given value if not null. To
    query for the null value, use {in: {serviceId: [null]}} instead.
    """
    serviceId: ID
    """
    Selects rows whose userVersion dimension equals the given value if not null.
    To query for the null value, use {in: {userVersion: [null]}} instead.
    """
    userVersion: String
}

"""
Filter for data in EdgeServerInfos. Fields match if the corresponding
dimension's value is in the given list. All fields are implicitly ANDed together.
"""
input EdgeServerInfosFilterIn {
    """
    Selects rows whose bootId dimension is in the given list. A null value in the
    list means a row with null for that dimension.
    """
    bootId: [ID]
    """
    Selects rows whose executableSchemaId dimension is in the given list. A null
    value in the list means a row with null for that dimension.
    """
    executableSchemaId: [ID]
    """
    Selects rows whose libraryVersion dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    libraryVersion: [String]
    """
    Selects rows whose platform dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    platform: [String]
    """
    Selects rows whose runtimeVersion dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    runtimeVersion: [String]
    """
    Selects rows whose schemaTag dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    schemaTag: [String]
    """
    Selects rows whose serverId dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    serverId: [ID]
    """
    Selects rows whose serviceId dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    serviceId: [ID]
    """
    Selects rows whose userVersion dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    userVersion: [String]
}

input EdgeServerInfosOrderBySpec {
    column: EdgeServerInfosColumn!
    direction: Ordering!
}

type EdgeServerInfosRecord {
    """Dimensions of EdgeServerInfos that can be grouped by."""
    groupBy: EdgeServerInfosDimensions!
    """Starting segment timestamp."""
    timestamp: Timestamp!
}

enum EmailCategory {
    EDUCATIONAL
}

type EmailPreferences {
    email: String!
    subscriptions: [EmailCategory!]!
    unsubscribedFromAll: Boolean!
}

"""Columns of ErrorStats."""
enum ErrorStatsColumn {
    ACCOUNT_ID
    CLIENT_NAME
    CLIENT_REFERENCE_ID
    CLIENT_VERSION
    ERRORS_COUNT
    PATH
    QUERY_ID
    QUERY_NAME
    QUERY_SIGNATURE
    REQUESTS_WITH_ERRORS_COUNT
    SCHEMA_HASH
    SCHEMA_TAG
    SERVICE_ID
    SERVICE_VERSION
    TIMESTAMP
}

type ErrorStatsDimensions {
    accountId: ID
    clientName: String
    clientReferenceId: ID
    clientVersion: String
    path: String
    queryId: ID
    queryName: String
    querySignature: String
    schemaHash: String
    schemaTag: String
    serviceId: ID
    serviceVersion: String
}

"""
Filter for data in ErrorStats. Fields with dimension names represent equality
checks. All fields are implicitly ANDed together.
"""
input ErrorStatsFilter {
    """
    Selects rows whose accountId dimension equals the given value if not null. To
    query for the null value, use {in: {accountId: [null]}} instead.
    """
    accountId: ID
    and: [ErrorStatsFilter!]
    """
    Selects rows whose clientName dimension equals the given value if not null. To
    query for the null value, use {in: {clientName: [null]}} instead.
    """
    clientName: String
    """
    Selects rows whose clientReferenceId dimension equals the given value if not
    null. To query for the null value, use {in: {clientReferenceId: [null]}} instead.
    """
    clientReferenceId: ID
    """
    Selects rows whose clientVersion dimension equals the given value if not null.
    To query for the null value, use {in: {clientVersion: [null]}} instead.
    """
    clientVersion: String
    in: ErrorStatsFilterIn
    not: ErrorStatsFilter
    or: [ErrorStatsFilter!]
    """
    Selects rows whose path dimension equals the given value if not null. To query
    for the null value, use {in: {path: [null]}} instead.
    """
    path: String
    """
    Selects rows whose queryId dimension equals the given value if not null. To
    query for the null value, use {in: {queryId: [null]}} instead.
    """
    queryId: ID
    """
    Selects rows whose queryName dimension equals the given value if not null. To
    query for the null value, use {in: {queryName: [null]}} instead.
    """
    queryName: String
    """
    Selects rows whose schemaHash dimension equals the given value if not null. To
    query for the null value, use {in: {schemaHash: [null]}} instead.
    """
    schemaHash: String
    """
    Selects rows whose schemaTag dimension equals the given value if not null. To
    query for the null value, use {in: {schemaTag: [null]}} instead.
    """
    schemaTag: String
    """
    Selects rows whose serviceId dimension equals the given value if not null. To
    query for the null value, use {in: {serviceId: [null]}} instead.
    """
    serviceId: ID
    """
    Selects rows whose serviceVersion dimension equals the given value if not
    null. To query for the null value, use {in: {serviceVersion: [null]}} instead.
    """
    serviceVersion: String
}

"""
Filter for data in ErrorStats. Fields match if the corresponding dimension's
value is in the given list. All fields are implicitly ANDed together.
"""
input ErrorStatsFilterIn {
    """
    Selects rows whose accountId dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    accountId: [ID]
    """
    Selects rows whose clientName dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    clientName: [String]
    """
    Selects rows whose clientReferenceId dimension is in the given list. A null
    value in the list means a row with null for that dimension.
    """
    clientReferenceId: [ID]
    """
    Selects rows whose clientVersion dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    clientVersion: [String]
    """Selects rows whose path dimension is in the given list. A null value in the list means a row with null for that dimension."""
    path: [String]
    """
    Selects rows whose queryId dimension is in the given list. A null value in the
    list means a row with null for that dimension.
    """
    queryId: [ID]
    """
    Selects rows whose queryName dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    queryName: [String]
    """
    Selects rows whose schemaHash dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    schemaHash: [String]
    """
    Selects rows whose schemaTag dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    schemaTag: [String]
    """
    Selects rows whose serviceId dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    serviceId: [ID]
    """
    Selects rows whose serviceVersion dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    serviceVersion: [String]
}

type ErrorStatsMetrics {
    errorsCount: Long!
    requestsWithErrorsCount: Long!
}

input ErrorStatsOrderBySpec {
    column: ErrorStatsColumn!
    direction: Ordering!
}

type ErrorStatsRecord {
    """Dimensions of ErrorStats that can be grouped by."""
    groupBy: ErrorStatsDimensions!
    """Metrics of ErrorStats that can be aggregated over."""
    metrics: ErrorStatsMetrics!
    """Starting segment timestamp."""
    timestamp: Timestamp!
}

"""Columns of FieldStats."""
enum FieldStatsColumn {
    ACCOUNT_ID
    CLIENT_NAME
    CLIENT_REFERENCE_ID
    CLIENT_VERSION
    ERRORS_COUNT
    FIELD
    FIELD_HISTOGRAM
    QUERY_ID
    QUERY_NAME
    SCHEMA_HASH
    SCHEMA_TAG
    SERVICE_ID
    SERVICE_VERSION
    TIMESTAMP
}

type FieldStatsDimensions {
    accountId: ID
    clientName: String
    clientReferenceId: ID
    clientVersion: String
    field: String
    queryId: ID
    queryName: String
    schemaHash: String
    schemaTag: String
    serviceId: ID
    serviceVersion: String
}

"""
Filter for data in FieldStats. Fields with dimension names represent equality
checks. All fields are implicitly ANDed together.
"""
input FieldStatsFilter {
    """
    Selects rows whose accountId dimension equals the given value if not null. To
    query for the null value, use {in: {accountId: [null]}} instead.
    """
    accountId: ID
    and: [FieldStatsFilter!]
    """
    Selects rows whose clientName dimension equals the given value if not null. To
    query for the null value, use {in: {clientName: [null]}} instead.
    """
    clientName: String
    """
    Selects rows whose clientReferenceId dimension equals the given value if not
    null. To query for the null value, use {in: {clientReferenceId: [null]}} instead.
    """
    clientReferenceId: ID
    """
    Selects rows whose clientVersion dimension equals the given value if not null.
    To query for the null value, use {in: {clientVersion: [null]}} instead.
    """
    clientVersion: String
    """
    Selects rows whose field dimension equals the given value if not null. To
    query for the null value, use {in: {field: [null]}} instead.
    """
    field: String
    in: FieldStatsFilterIn
    not: FieldStatsFilter
    or: [FieldStatsFilter!]
    """
    Selects rows whose queryId dimension equals the given value if not null. To
    query for the null value, use {in: {queryId: [null]}} instead.
    """
    queryId: ID
    """
    Selects rows whose queryName dimension equals the given value if not null. To
    query for the null value, use {in: {queryName: [null]}} instead.
    """
    queryName: String
    """
    Selects rows whose schemaHash dimension equals the given value if not null. To
    query for the null value, use {in: {schemaHash: [null]}} instead.
    """
    schemaHash: String
    """
    Selects rows whose schemaTag dimension equals the given value if not null. To
    query for the null value, use {in: {schemaTag: [null]}} instead.
    """
    schemaTag: String
    """
    Selects rows whose serviceId dimension equals the given value if not null. To
    query for the null value, use {in: {serviceId: [null]}} instead.
    """
    serviceId: ID
    """
    Selects rows whose serviceVersion dimension equals the given value if not
    null. To query for the null value, use {in: {serviceVersion: [null]}} instead.
    """
    serviceVersion: String
}

"""
Filter for data in FieldStats. Fields match if the corresponding dimension's
value is in the given list. All fields are implicitly ANDed together.
"""
input FieldStatsFilterIn {
    """
    Selects rows whose accountId dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    accountId: [ID]
    """
    Selects rows whose clientName dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    clientName: [String]
    """
    Selects rows whose clientReferenceId dimension is in the given list. A null
    value in the list means a row with null for that dimension.
    """
    clientReferenceId: [ID]
    """
    Selects rows whose clientVersion dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    clientVersion: [String]
    """
    Selects rows whose field dimension is in the given list. A null value in the
    list means a row with null for that dimension.
    """
    field: [String]
    """
    Selects rows whose queryId dimension is in the given list. A null value in the
    list means a row with null for that dimension.
    """
    queryId: [ID]
    """
    Selects rows whose queryName dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    queryName: [String]
    """
    Selects rows whose schemaHash dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    schemaHash: [String]
    """
    Selects rows whose schemaTag dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    schemaTag: [String]
    """
    Selects rows whose serviceId dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    serviceId: [ID]
    """
    Selects rows whose serviceVersion dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    serviceVersion: [String]
}

type FieldStatsMetrics {
    errorsCount: Long!
    fieldHistogram: DurationHistogram!
}

input FieldStatsOrderBySpec {
    column: FieldStatsColumn!
    direction: Ordering!
}

type FieldStatsRecord {
    """Dimensions of FieldStats that can be grouped by."""
    groupBy: FieldStatsDimensions!
    """Metrics of FieldStats that can be aggregated over."""
    metrics: FieldStatsMetrics!
    """Starting segment timestamp."""
    timestamp: Timestamp!
}

enum HTTPMethod {
    CONNECT
    DELETE
    GET
    HEAD
    OPTIONS
    PATCH
    POST
    PUT
    TRACE
    UNKNOWN
    UNRECOGNIZED
}

interface Identity {
    id: ID!
    name: String!
}

union IdentityMutation = ServiceMutation | UserMutation

type InternalAdminUser {
    role: InternalMdgAdminRole!
    userID: String!
}

type InternalIdentity implements Identity {
    accounts: [Account!]!
    email: String
    id: ID!
    name: String!
}

enum InternalMdgAdminRole {
    INTERNAL_MDG_READ_ONLY
    INTERNAL_MDG_SALES
    INTERNAL_MDG_SUPER_ADMIN
    INTERNAL_MDG_SUPPORT
}

type Invoice {
    closedAt: Timestamp
    collectionMethod: String
    createdAt: Timestamp!
    invoiceNumber: Int!
    state: InvoiceState!
    totalInCents: Int!
    updatedAt: Timestamp!
    uuid: ID!
}

enum InvoiceState {
    COLLECTED
    FAILED
    OPEN
    PAST_DUE
    UNKNOWN
}

"""Long type"""
scalar Long

type MediaUploadInfo {
    csrfToken: String!
    maxContentLength: Int!
    url: String!
}

enum Ordering {
    ASCENDING
    DESCENDING
}

"""PagerDuty notification channel"""
type PagerDutyChannel implements Channel {
    id: ID!
    name: String
    queryTriggers: [QueryTrigger!]!
    routingKey: String!
}

"""PagerDuty notification channel parameters"""
input PagerDutyChannelInput {
    name: String
    routingKey: String!
}

type Protobuf {
    json: String
    object: Object
    raw: Blob!
    text: String!
}

"""Columns of QueryStats."""
enum QueryStatsColumn {
    ACCOUNT_ID
    CACHED_HISTOGRAM
    CACHED_REQUESTS_COUNT
    CACHE_TTL_HISTOGRAM
    CLIENT_NAME
    CLIENT_REFERENCE_ID
    CLIENT_VERSION
    FORBIDDEN_OPERATION_COUNT
    FROM_ENGINEPROXY
    QUERY_ID
    QUERY_NAME
    QUERY_SIGNATURE
    REGISTERED_OPERATION_COUNT
    REQUESTS_WITH_ERRORS_COUNT
    SCHEMA_HASH
    SCHEMA_TAG
    SERVICE_ID
    SERVICE_VERSION
    TIMESTAMP
    UNCACHED_HISTOGRAM
    UNCACHED_REQUESTS_COUNT
}

type QueryStatsDimensions {
    accountId: ID
    clientName: String
    clientReferenceId: ID
    clientVersion: String
    fromEngineproxy: String
    queryId: ID
    queryName: String
    querySignature: String
    schemaHash: String
    schemaTag: String
    serviceId: ID
    serviceVersion: String
}

"""
Filter for data in QueryStats. Fields with dimension names represent equality
checks. All fields are implicitly ANDed together.
"""
input QueryStatsFilter {
    """
    Selects rows whose accountId dimension equals the given value if not null. To
    query for the null value, use {in: {accountId: [null]}} instead.
    """
    accountId: ID
    and: [QueryStatsFilter!]
    """
    Selects rows whose clientName dimension equals the given value if not null. To
    query for the null value, use {in: {clientName: [null]}} instead.
    """
    clientName: String
    """
    Selects rows whose clientReferenceId dimension equals the given value if not
    null. To query for the null value, use {in: {clientReferenceId: [null]}} instead.
    """
    clientReferenceId: ID
    """
    Selects rows whose clientVersion dimension equals the given value if not null.
    To query for the null value, use {in: {clientVersion: [null]}} instead.
    """
    clientVersion: String
    """
    Selects rows whose fromEngineproxy dimension equals the given value if not
    null. To query for the null value, use {in: {fromEngineproxy: [null]}} instead.
    """
    fromEngineproxy: String
    in: QueryStatsFilterIn
    not: QueryStatsFilter
    or: [QueryStatsFilter!]
    """
    Selects rows whose queryId dimension equals the given value if not null. To
    query for the null value, use {in: {queryId: [null]}} instead.
    """
    queryId: ID
    """
    Selects rows whose queryName dimension equals the given value if not null. To
    query for the null value, use {in: {queryName: [null]}} instead.
    """
    queryName: String
    """
    Selects rows whose schemaHash dimension equals the given value if not null. To
    query for the null value, use {in: {schemaHash: [null]}} instead.
    """
    schemaHash: String
    """
    Selects rows whose schemaTag dimension equals the given value if not null. To
    query for the null value, use {in: {schemaTag: [null]}} instead.
    """
    schemaTag: String
    """
    Selects rows whose serviceId dimension equals the given value if not null. To
    query for the null value, use {in: {serviceId: [null]}} instead.
    """
    serviceId: ID
    """
    Selects rows whose serviceVersion dimension equals the given value if not
    null. To query for the null value, use {in: {serviceVersion: [null]}} instead.
    """
    serviceVersion: String
}

"""
Filter for data in QueryStats. Fields match if the corresponding dimension's
value is in the given list. All fields are implicitly ANDed together.
"""
input QueryStatsFilterIn {
    """
    Selects rows whose accountId dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    accountId: [ID]
    """
    Selects rows whose clientName dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    clientName: [String]
    """
    Selects rows whose clientReferenceId dimension is in the given list. A null
    value in the list means a row with null for that dimension.
    """
    clientReferenceId: [ID]
    """
    Selects rows whose clientVersion dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    clientVersion: [String]
    """
    Selects rows whose fromEngineproxy dimension is in the given list. A null
    value in the list means a row with null for that dimension.
    """
    fromEngineproxy: [String]
    """
    Selects rows whose queryId dimension is in the given list. A null value in the
    list means a row with null for that dimension.
    """
    queryId: [ID]
    """
    Selects rows whose queryName dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    queryName: [String]
    """
    Selects rows whose schemaHash dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    schemaHash: [String]
    """
    Selects rows whose schemaTag dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    schemaTag: [String]
    """
    Selects rows whose serviceId dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    serviceId: [ID]
    """
    Selects rows whose serviceVersion dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    serviceVersion: [String]
}

type QueryStatsMetrics {
    cacheTtlHistogram: DurationHistogram!
    cachedHistogram: DurationHistogram!
    cachedRequestsCount: Long!
    forbiddenOperationCount: Long!
    registeredOperationCount: Long!
    requestsWithErrorsCount: Long!
    totalLatencyHistogram: DurationHistogram!
    uncachedHistogram: DurationHistogram!
    uncachedRequestsCount: Long!
}

input QueryStatsOrderBySpec {
    column: QueryStatsColumn!
    direction: Ordering!
}

type QueryStatsRecord {
    """Dimensions of QueryStats that can be grouped by."""
    groupBy: QueryStatsDimensions!
    """Metrics of QueryStats that can be aggregated over."""
    metrics: QueryStatsMetrics!
    """Starting segment timestamp."""
    timestamp: Timestamp!
}

"""Query Trigger"""
type QueryTrigger {
    channels: [Channel!]
    comparisonOperator: ComparisonOperator!
    enabled: Boolean
    excludedOperationNames: [String!]!
    id: ID!
    metric: QueryTriggerMetric!
    operationNames: [String!]!
    percentile: Float
    scope: QueryTriggerScope!
    serviceId: String!
    state: QueryTriggerState!
    threshold: Float!
    variant: String
    window: QueryTriggerWindow!
}

"""Query trigger"""
input QueryTriggerInput {
    channelIds: [String!]
    comparisonOperator: ComparisonOperator!
    enabled: Boolean
    excludedOperationNames: [String!]
    metric: QueryTriggerMetric!
    operationNames: [String!]
    percentile: Float
    scope: QueryTriggerScope
    threshold: Float!
    variant: String
    window: QueryTriggerWindow!
}

enum QueryTriggerMetric {
    """Number of requests within the window that resulted in an error. Ignores `percentile`."""
    ERROR_COUNT
    """Number of error requests divided by total number of requests. Ignores `percentile`."""
    ERROR_PERCENTAGE
    """Number of requests within the window. Ignores `percentile`."""
    REQUEST_COUNT
    """Request latency in ms. Requires `percentile`."""
    REQUEST_SERVICE_TIME
}

enum QueryTriggerScope {
    ALL
    ANY
    UNRECOGNIZED
}

"""Query trigger state"""
type QueryTriggerState {
    evaluatedAt: Timestamp!
    lastTriggeredAt: Timestamp
    operations: [QueryTriggerStateOperation!]!
    triggered: Boolean!
}

type QueryTriggerStateOperation {
    count: Long!
    operation: String!
    triggered: Boolean!
    value: Float!
}

enum QueryTriggerWindow {
    FIFTEEN_MINUTES
    FIVE_MINUTES
    ONE_MINUTE
    UNRECOGNIZED
}

type RegistrySubscription {
    channel: Channel!
    createdAt: Timestamp!
    id: ID!
    lastUpdatedAt: Timestamp!
    options: SubscriptionOptions!
    serviceID: ID!
    variant: String!
}

type ReportServerInfoResponse {
    inSeconds: Int!
    withExecutableSchema: Boolean!
}

enum Resolution {
    R15M
    R1D
    R1H
    R1M
    R5M
    R6H
}

type ScheduledSummary {
    channel: Channel
    consecutiveFailures: Int!
    enabled: Boolean!
    id: ID!
    lastFailedAt: Timestamp
    lastFailureReason: String
    lastScheduledAt: Timestamp
    lastSucceededAt: Timestamp
    service: Service!
    tag: String @deprecated(reason: "Use variant")
    timezone: String!
    variant: String
}

type Service implements Identity {
    account: Account
    accountId: ID
    apiKeys: [ApiKey!]
    """
    Get an URL to which an avatar image can be uploaded. Client uploads by sending a PUT request
    with the image data to MediaUploadInfo.url. Client SHOULD set the "Content-Type" header to the
    browser-inferred MIME type, and SHOULD set the "x-apollo-content-filename" header to the
    filename, if such information is available. Client MUST set the "x-apollo-csrf-token" header to
    MediaUploadInfo.csrfToken.
    """
    avatarUpload: AvatarUploadResult
    """
    Get an image URL for the service's avatar. Note that CORS is not enabled for these URLs. The size
    argument is used for bandwidth reduction, and should be the size of the image as displayed in the
    application. Apollo's media server will downscale larger images to at least the requested size,
    but this will not happen for third-party media servers.
    """
    avatarUrl(size: Int! = 40): String
    createdAt: Timestamp!
    datadogMetricsConfig: DatadogMetricsConfig
    deletedAt: Timestamp
    firstReportedAt: Timestamp
    id: ID!
    lastReportedAt(graphVariant: String): Timestamp
    name: String!
    """Get query triggers for a given variant. If variant is null all the triggers for this service will be gotten."""
    queryTriggers(graphVariant: String, operationNames: [String!]): [QueryTrigger!]
    """Subscription to registry updates for this subscription ID"""
    registrySubscription(id: ID!): RegistrySubscription
    """
    Subscriptions to registry updates for this service. If no graphVariant is
    passed, subscriptions across ALL variants will be returned.
    """
    registrySubscriptions(graphVariant: String): [RegistrySubscription!]!
    """
    Whether registry subscriptions (with any options) are enabled. If variant is
    not passed, returns true if configuration is present for any variant
    """
    registrySubscriptionsEnabled(graphVariant: String): Boolean!
    reportingEnabled: Boolean!
    """Which permissions the current user has for interacting with this service"""
    roles: ServiceRoles
    scheduledSummaries: [ScheduledSummary!]!
    stats(
        from: Timestamp!
        """Granularity of buckets. Defaults to the entire range (aggregate all data into a single durationBucket) when null."""
        resolution: Resolution
        """Defaults to the current time when null."""
        to: Timestamp
    ): ServiceStatsWindow!
    trace(id: ID!): Trace
    traceStorageEnabled: Boolean!
    """Get a schema by hash OR current tag"""
    schema(hash: ID, tag: String): Schema
    """
    Get schema tags, with optional filtering to a set of tags. Always sorted by creation
    date in reverse chronological order.
    """
    schemaTags(tags: [String!]): [SchemaTag!]!
    """
    Get the schema tag created at or most recently before a specified date. Returns
    latest tag by default.
    """
    schemaTag(tag: String!, createdAt: Timestamp): SchemaTag
    schemaTagById(id: ID!): SchemaTag
    """
    List of implementing services that comprise a graph. A non-federated graph should have a single implementing service.
    Set includeDeleted to see deleted implementing services
    """
    implementingServices(graphVariant: String!, includeDeleted: Boolean): GraphImplementors
    """
    This returns the composition result that was most recently published to the graph.
    Only identites that canQuerySchemas and canQueryImplementingServices have access
    to this field
    """
    mostRecentCompositionPublish(graphVariant: String!): CompositionPublishResult
    """Given a graphCompositionID, return the results of composition. This can represent either a validation or a publish."""
    compositionResultById(id: ID!): CompositionResult
    """
    A particular variant (sometimes called "tag") of the graph, often representing
    a live traffic environment (such as "prod"). Each variant can represent a
    specific URL or destination to query at, analytics, and its own schema history.
    """
    variant(name: String!): GraphVariant
}

"""Columns of ServiceEdgeServerInfos."""
enum ServiceEdgeServerInfosColumn {
    BOOT_ID
    EXECUTABLE_SCHEMA_ID
    LIBRARY_VERSION
    PLATFORM
    RUNTIME_VERSION
    SCHEMA_TAG
    SERVER_ID
    TIMESTAMP
    USER_VERSION
}

type ServiceEdgeServerInfosDimensions {
    bootId: ID
    executableSchemaId: ID
    libraryVersion: String
    platform: String
    runtimeVersion: String
    schemaTag: String
    serverId: ID
    userVersion: String
}

"""
Filter for data in ServiceEdgeServerInfos. Fields with dimension names represent
equality checks. All fields are implicitly ANDed together.
"""
input ServiceEdgeServerInfosFilter {
    and: [ServiceEdgeServerInfosFilter!]
    """
    Selects rows whose bootId dimension equals the given value if not null. To
    query for the null value, use {in: {bootId: [null]}} instead.
    """
    bootId: ID
    """
    Selects rows whose executableSchemaId dimension equals the given value if not
    null. To query for the null value, use {in: {executableSchemaId: [null]}} instead.
    """
    executableSchemaId: ID
    in: ServiceEdgeServerInfosFilterIn
    """
    Selects rows whose libraryVersion dimension equals the given value if not
    null. To query for the null value, use {in: {libraryVersion: [null]}} instead.
    """
    libraryVersion: String
    not: ServiceEdgeServerInfosFilter
    or: [ServiceEdgeServerInfosFilter!]
    """
    Selects rows whose platform dimension equals the given value if not null. To
    query for the null value, use {in: {platform: [null]}} instead.
    """
    platform: String
    """
    Selects rows whose runtimeVersion dimension equals the given value if not
    null. To query for the null value, use {in: {runtimeVersion: [null]}} instead.
    """
    runtimeVersion: String
    """
    Selects rows whose schemaTag dimension equals the given value if not null. To
    query for the null value, use {in: {schemaTag: [null]}} instead.
    """
    schemaTag: String
    """
    Selects rows whose serverId dimension equals the given value if not null. To
    query for the null value, use {in: {serverId: [null]}} instead.
    """
    serverId: ID
    """
    Selects rows whose userVersion dimension equals the given value if not null.
    To query for the null value, use {in: {userVersion: [null]}} instead.
    """
    userVersion: String
}

"""
Filter for data in ServiceEdgeServerInfos. Fields match if the corresponding
dimension's value is in the given list. All fields are implicitly ANDed together.
"""
input ServiceEdgeServerInfosFilterIn {
    """
    Selects rows whose bootId dimension is in the given list. A null value in the
    list means a row with null for that dimension.
    """
    bootId: [ID]
    """
    Selects rows whose executableSchemaId dimension is in the given list. A null
    value in the list means a row with null for that dimension.
    """
    executableSchemaId: [ID]
    """
    Selects rows whose libraryVersion dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    libraryVersion: [String]
    """
    Selects rows whose platform dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    platform: [String]
    """
    Selects rows whose runtimeVersion dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    runtimeVersion: [String]
    """
    Selects rows whose schemaTag dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    schemaTag: [String]
    """
    Selects rows whose serverId dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    serverId: [ID]
    """
    Selects rows whose userVersion dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    userVersion: [String]
}

input ServiceEdgeServerInfosOrderBySpec {
    column: ServiceEdgeServerInfosColumn!
    direction: Ordering!
}

type ServiceEdgeServerInfosRecord {
    """Dimensions of ServiceEdgeServerInfos that can be grouped by."""
    groupBy: ServiceEdgeServerInfosDimensions!
    """Starting segment timestamp."""
    timestamp: Timestamp!
}

"""Columns of ServiceErrorStats."""
enum ServiceErrorStatsColumn {
    CLIENT_NAME
    CLIENT_REFERENCE_ID
    CLIENT_VERSION
    ERRORS_COUNT
    PATH
    QUERY_ID
    QUERY_NAME
    QUERY_SIGNATURE
    REQUESTS_WITH_ERRORS_COUNT
    SCHEMA_HASH
    SCHEMA_TAG
    SERVICE_VERSION
    TIMESTAMP
}

type ServiceErrorStatsDimensions {
    clientName: String
    clientReferenceId: ID
    clientVersion: String
    path: String
    queryId: ID
    queryName: String
    querySignature: String
    schemaHash: String
    schemaTag: String
    serviceVersion: String
}

"""
Filter for data in ServiceErrorStats. Fields with dimension names represent
equality checks. All fields are implicitly ANDed together.
"""
input ServiceErrorStatsFilter {
    and: [ServiceErrorStatsFilter!]
    """
    Selects rows whose clientName dimension equals the given value if not null. To
    query for the null value, use {in: {clientName: [null]}} instead.
    """
    clientName: String
    """
    Selects rows whose clientReferenceId dimension equals the given value if not
    null. To query for the null value, use {in: {clientReferenceId: [null]}} instead.
    """
    clientReferenceId: ID
    """
    Selects rows whose clientVersion dimension equals the given value if not null.
    To query for the null value, use {in: {clientVersion: [null]}} instead.
    """
    clientVersion: String
    in: ServiceErrorStatsFilterIn
    not: ServiceErrorStatsFilter
    or: [ServiceErrorStatsFilter!]
    """
    Selects rows whose path dimension equals the given value if not null. To query
    for the null value, use {in: {path: [null]}} instead.
    """
    path: String
    """
    Selects rows whose queryId dimension equals the given value if not null. To
    query for the null value, use {in: {queryId: [null]}} instead.
    """
    queryId: ID
    """
    Selects rows whose queryName dimension equals the given value if not null. To
    query for the null value, use {in: {queryName: [null]}} instead.
    """
    queryName: String
    """
    Selects rows whose schemaHash dimension equals the given value if not null. To
    query for the null value, use {in: {schemaHash: [null]}} instead.
    """
    schemaHash: String
    """
    Selects rows whose schemaTag dimension equals the given value if not null. To
    query for the null value, use {in: {schemaTag: [null]}} instead.
    """
    schemaTag: String
    """
    Selects rows whose serviceVersion dimension equals the given value if not
    null. To query for the null value, use {in: {serviceVersion: [null]}} instead.
    """
    serviceVersion: String
}

"""
Filter for data in ServiceErrorStats. Fields match if the corresponding
dimension's value is in the given list. All fields are implicitly ANDed together.
"""
input ServiceErrorStatsFilterIn {
    """
    Selects rows whose clientName dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    clientName: [String]
    """
    Selects rows whose clientReferenceId dimension is in the given list. A null
    value in the list means a row with null for that dimension.
    """
    clientReferenceId: [ID]
    """
    Selects rows whose clientVersion dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    clientVersion: [String]
    """Selects rows whose path dimension is in the given list. A null value in the list means a row with null for that dimension."""
    path: [String]
    """
    Selects rows whose queryId dimension is in the given list. A null value in the
    list means a row with null for that dimension.
    """
    queryId: [ID]
    """
    Selects rows whose queryName dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    queryName: [String]
    """
    Selects rows whose schemaHash dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    schemaHash: [String]
    """
    Selects rows whose schemaTag dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    schemaTag: [String]
    """
    Selects rows whose serviceVersion dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    serviceVersion: [String]
}

type ServiceErrorStatsMetrics {
    errorsCount: Long!
    requestsWithErrorsCount: Long!
}

input ServiceErrorStatsOrderBySpec {
    column: ServiceErrorStatsColumn!
    direction: Ordering!
}

type ServiceErrorStatsRecord {
    """Dimensions of ServiceErrorStats that can be grouped by."""
    groupBy: ServiceErrorStatsDimensions!
    """Metrics of ServiceErrorStats that can be aggregated over."""
    metrics: ServiceErrorStatsMetrics!
    """Starting segment timestamp."""
    timestamp: Timestamp!
}

"""Columns of ServiceFieldStats."""
enum ServiceFieldStatsColumn {
    CLIENT_NAME
    CLIENT_REFERENCE_ID
    CLIENT_VERSION
    ERRORS_COUNT
    FIELD
    FIELD_HISTOGRAM
    QUERY_ID
    QUERY_NAME
    SCHEMA_HASH
    SCHEMA_TAG
    SERVICE_VERSION
    TIMESTAMP
}

type ServiceFieldStatsDimensions {
    clientName: String
    clientReferenceId: ID
    clientVersion: String
    field: String
    queryId: ID
    queryName: String
    schemaHash: String
    schemaTag: String
    serviceVersion: String
}

"""
Filter for data in ServiceFieldStats. Fields with dimension names represent
equality checks. All fields are implicitly ANDed together.
"""
input ServiceFieldStatsFilter {
    and: [ServiceFieldStatsFilter!]
    """
    Selects rows whose clientName dimension equals the given value if not null. To
    query for the null value, use {in: {clientName: [null]}} instead.
    """
    clientName: String
    """
    Selects rows whose clientReferenceId dimension equals the given value if not
    null. To query for the null value, use {in: {clientReferenceId: [null]}} instead.
    """
    clientReferenceId: ID
    """
    Selects rows whose clientVersion dimension equals the given value if not null.
    To query for the null value, use {in: {clientVersion: [null]}} instead.
    """
    clientVersion: String
    """
    Selects rows whose field dimension equals the given value if not null. To
    query for the null value, use {in: {field: [null]}} instead.
    """
    field: String
    in: ServiceFieldStatsFilterIn
    not: ServiceFieldStatsFilter
    or: [ServiceFieldStatsFilter!]
    """
    Selects rows whose queryId dimension equals the given value if not null. To
    query for the null value, use {in: {queryId: [null]}} instead.
    """
    queryId: ID
    """
    Selects rows whose queryName dimension equals the given value if not null. To
    query for the null value, use {in: {queryName: [null]}} instead.
    """
    queryName: String
    """
    Selects rows whose schemaHash dimension equals the given value if not null. To
    query for the null value, use {in: {schemaHash: [null]}} instead.
    """
    schemaHash: String
    """
    Selects rows whose schemaTag dimension equals the given value if not null. To
    query for the null value, use {in: {schemaTag: [null]}} instead.
    """
    schemaTag: String
    """
    Selects rows whose serviceVersion dimension equals the given value if not
    null. To query for the null value, use {in: {serviceVersion: [null]}} instead.
    """
    serviceVersion: String
}

"""
Filter for data in ServiceFieldStats. Fields match if the corresponding
dimension's value is in the given list. All fields are implicitly ANDed together.
"""
input ServiceFieldStatsFilterIn {
    """
    Selects rows whose clientName dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    clientName: [String]
    """
    Selects rows whose clientReferenceId dimension is in the given list. A null
    value in the list means a row with null for that dimension.
    """
    clientReferenceId: [ID]
    """
    Selects rows whose clientVersion dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    clientVersion: [String]
    """
    Selects rows whose field dimension is in the given list. A null value in the
    list means a row with null for that dimension.
    """
    field: [String]
    """
    Selects rows whose queryId dimension is in the given list. A null value in the
    list means a row with null for that dimension.
    """
    queryId: [ID]
    """
    Selects rows whose queryName dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    queryName: [String]
    """
    Selects rows whose schemaHash dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    schemaHash: [String]
    """
    Selects rows whose schemaTag dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    schemaTag: [String]
    """
    Selects rows whose serviceVersion dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    serviceVersion: [String]
}

type ServiceFieldStatsMetrics {
    errorsCount: Long!
    fieldHistogram: DurationHistogram!
}

input ServiceFieldStatsOrderBySpec {
    column: ServiceFieldStatsColumn!
    direction: Ordering!
}

type ServiceFieldStatsRecord {
    """Dimensions of ServiceFieldStats that can be grouped by."""
    groupBy: ServiceFieldStatsDimensions!
    """Metrics of ServiceFieldStats that can be aggregated over."""
    metrics: ServiceFieldStatsMetrics!
    """Starting segment timestamp."""
    timestamp: Timestamp!
}

type ServiceMutation {
    delete: Void
    """Delete the service's avatar. Requires Service.roles.canUpdateAvatar to be true."""
    deleteAvatar: AvatarDeleteError
    """Delete an existing query trigger"""
    deleteQueryTrigger(id: ID!): Boolean!
    """Deletes this service's current subscriptions specific to the ID, returns true if it existed"""
    deleteRegistrySubscription(id: ID!): Boolean!
    """
    Deletes this service's current registry subscription(s) specific to its graph variant,
    returns a list of subscription IDs that were deleted.
    """
    deleteRegistrySubscriptions(variant: String!): [ID!]!
    deleteScheduledSummary(id: ID!): Boolean!
    id: ID! @deprecated(reason: "Use service.id")
    newKey(keyName: String): ApiKey
    removeKey(
        """API key"""
        key: String
        """Deprecated, use the 'key' argument instead"""
        token: String
    ): Void
    rename(to: String!): Service
    renameKey(
        key: String
        newKeyName: String
        """Deprecated, use the 'key' argument instead"""
        token: String
    ): ApiKey
    """
    Report information about a running GraphQL server instance, used for automatic
    schema reporting. This can optionally include an `executableSchema`, in the
    form of a GraphQL document, and should only do so if requested explicitly in
    response to a previous report that designates `withSchema: true`
    """
    reportServerInfo(
        """
        Only sent if previously requested i.e. received ReportServerInfoResponse
        with withExecutableSchema = true. An executable schema is a schema document
        that describes the full GraphQL schema that an external client could execute
        queries against. This must be a valid GraphQL schema document, as per the
        GraphQL specification: https://spec.graphql.org/
        """
        executableSchema: String
        """Information about the edge server, see descriptions for individual fields."""
        info: EdgeServerInfo!
    ): ReportServerInfoResponse
    service: Service!
    transfer(to: String!): Service
    undelete: Service
    """Update datadog configuration"""
    updateDatadogMetricsConfig(apiKey: String, enabled: Boolean): DatadogMetricsConfig!
    upsertQueryTrigger(id: ID, trigger: QueryTriggerInput!): QueryTrigger
    """Create or update a subscription for a service."""
    upsertRegistrySubscription(
        """ID of Slack channel for registry notification."""
        channelID: ID
        """ID of registry subscription"""
        id: ID
        """Set of options/customization for notification."""
        options: SubscriptionOptionsInput
        """Variant to notify on."""
        variant: String
    ): RegistrySubscription!
    upsertScheduledSummary(
        channelID: ID
        enabled: Boolean
        id: ID
        """Deprecated, use the 'variant' argument instead"""
        tag: String
        timezone: String
        variant: String
    ): ScheduledSummary
    """
    Create a new API key and also write the storage secret for that API key.
    The storage secret allows users to fetch files from GCS like operation manifests and composition artifacts for federation.
    Storage secrets need to be accessible via a service's API key, so we need to
    couple the creation of these files with API key creation
    """
    createApiKeyAndWriteStorageSecret(keyName: String): RegistryApiKey
    """Make changes to a graph variant."""
    variant(name: String!): GraphVariantMutation
    validateOperations(operations: [OperationDocumentInput!]!, tag: String = "current", gitContext: GitContextInput): ValidateOperationsResult!
    registerOperationsWithResponse(
        clientIdentity: RegisteredClientIdentityInput
        gitContext: GitContextInput
        operations: [RegisteredOperationInput!]!
        manifestVersion: Int
        """
        Specifies which variant of a graph these operations belong to.
        Formerly known as "tag"
      Defaults to "current"
    """
        graphVariant: String! = "current"
    ): RegisterOperationsMutationResponse
    uploadSchema(schema: IntrospectionSchemaInput, tag: String!, gitContext: GitContextInput, historicParameters: HistoricQueryParameters, overrideComposedSchema: Boolean! = false, schemaDocument: String, errorOnBadRequest: Boolean! = true): UploadSchemaMutationResponse
    deleteSchema(schemaHash: String!): String!
    """
    Checks a proposed schema against the schema that has been published to
    a particular tag, using metrics that have been published to the base tag.
    Callers can set the historicParameters directly, which will be used if
    provided. If useMaximumRetention is provided, but historicParameters is not,
    then validation will use the maximum retention the graph has access to.
    If neither historicParameters nor useMaximumRetention is provided, the
    default time range of one week (7 days) will be used.
    """
    checkSchema(proposedSchema: IntrospectionSchemaInput, proposedSchemaHash: String, baseSchemaTag: String = "current", gitContext: GitContextInput, historicParameters: HistoricQueryParameters, frontend: String = "https://engine.apollographql.com", useMaximumRetention: Boolean): CheckSchemaResult!
    tagSchema(hash: ID!, tag: String!, gitContext: GitContextInput, historicParameters: HistoricQueryParameters, overrideComposedSchema: Boolean! = false): SchemaTag
    deleteSchemaTag(tag: String!): DeleteSchemaTagResult!
    upsertImplementingService(graphVariant: String!, name: String!, url: String!, revision: String!, activePartialSchema: PartialSchemaInput!): UpsertImplementingServiceResponse!
    upsertImplementingServiceAndTriggerComposition(graphVariant: String!, name: String!, url: String!, revision: String!, activePartialSchema: PartialSchemaInput!): CompositionAndUpsertResult!
    uploadPartialSchema(graphVariant: String!, partialSchemaSDL: String!): UploadPartialSchemaResponse!
    """
    This mutation will not result in any changes to the implementing service
    Run composition with the Implementing Service's partial schema replaced with the one provided
    in the mutation's input. Store the composed schema, return the hash of the composed schema,
    and any warnings and errors pertaining to composition.
    This mutation will not run validation against operations.
    """
    validatePartialSchemaOfImplementingServiceAgainstGraph(graphVariant: String!, implementingServiceName: String!, partialSchema: PartialSchemaInput!): CompositionValidationResult!
    """
    Manually triggers composition.
    An error will be thrown if a graphVariant does not contain any implementing services.
    Users might not want to recalculate the composition config every time an
    The gateway won't be updated if there are errors or warnings. If no errors or warnings are
    present, then the gateway will be updated to have a new composition config and the composed
    schema corresponding to the new composition config will registered to the graphVariant. If
    there are no changes that haven't been shipped to the gateway, everything will be undefined
    and errors and warnings will be empty.
    """
    recalculateCompositionConfig(graphVariant: String!): CompositionPublishResult!
    removeImplementingServiceAndTriggerComposition(graphVariant: String!, name: String!): CompositionAndRemoveResult!
    removeImplementingService(graphVariant: String!, name: String!): Boolean!
    """
    Compose an implementing service's partial schema, diff the composed schema, validate traffic against that schema,
    and store the result so the details can be viewed by users in the UI.
    This mutation will not mark the schema as "published".
    """
    checkPartialSchema(
        """Specifies which variant of a graph this mutation operates on."""
        graphVariant: String!
        """Name of the implementing service to validate the partial schema against"""
        implementingServiceName: String!
        """The partial schema to validate against an implementing service"""
        partialSchema: PartialSchemaInput!
        gitContext: GitContextInput
        historicParameters: HistoricQueryParameters
        """
        Basename of the frontend for URL generation.
        If composition is successful; this will point to
        `${basename}/service/engine/checks?schemaTagId=${schemaTagId}`.
        If composition is unsuccessful, this will point to
        `${basename}/service/engine/checks?graphCompositionID=${graphCompositionID}`
        """
        frontend: String = "https://engine.apollographql.com"
        """
        Whether to use the maximum retention for historical validation. This only takes
        effect if historicParameters is null.
        """
        useMaximumRetention: Boolean
    ): CheckPartialSchemaResult!
}

"""Columns of ServiceQueryStats."""
enum ServiceQueryStatsColumn {
    CACHED_HISTOGRAM
    CACHED_REQUESTS_COUNT
    CACHE_TTL_HISTOGRAM
    CLIENT_NAME
    CLIENT_REFERENCE_ID
    CLIENT_VERSION
    FORBIDDEN_OPERATION_COUNT
    FROM_ENGINEPROXY
    QUERY_ID
    QUERY_NAME
    QUERY_SIGNATURE
    REGISTERED_OPERATION_COUNT
    REQUESTS_WITH_ERRORS_COUNT
    SCHEMA_HASH
    SCHEMA_TAG
    SERVICE_VERSION
    TIMESTAMP
    UNCACHED_HISTOGRAM
    UNCACHED_REQUESTS_COUNT
}

type ServiceQueryStatsDimensions {
    clientName: String
    clientReferenceId: ID
    clientVersion: String
    fromEngineproxy: String
    queryId: ID
    queryName: String
    querySignature: String
    schemaHash: String
    schemaTag: String
    serviceVersion: String
}

"""
Filter for data in ServiceQueryStats. Fields with dimension names represent
equality checks. All fields are implicitly ANDed together.
"""
input ServiceQueryStatsFilter {
    and: [ServiceQueryStatsFilter!]
    """
    Selects rows whose clientName dimension equals the given value if not null. To
    query for the null value, use {in: {clientName: [null]}} instead.
    """
    clientName: String
    """
    Selects rows whose clientReferenceId dimension equals the given value if not
    null. To query for the null value, use {in: {clientReferenceId: [null]}} instead.
    """
    clientReferenceId: ID
    """
    Selects rows whose clientVersion dimension equals the given value if not null.
    To query for the null value, use {in: {clientVersion: [null]}} instead.
    """
    clientVersion: String
    """
    Selects rows whose fromEngineproxy dimension equals the given value if not
    null. To query for the null value, use {in: {fromEngineproxy: [null]}} instead.
    """
    fromEngineproxy: String
    in: ServiceQueryStatsFilterIn
    not: ServiceQueryStatsFilter
    or: [ServiceQueryStatsFilter!]
    """
    Selects rows whose queryId dimension equals the given value if not null. To
    query for the null value, use {in: {queryId: [null]}} instead.
    """
    queryId: ID
    """
    Selects rows whose queryName dimension equals the given value if not null. To
    query for the null value, use {in: {queryName: [null]}} instead.
    """
    queryName: String
    """
    Selects rows whose schemaHash dimension equals the given value if not null. To
    query for the null value, use {in: {schemaHash: [null]}} instead.
    """
    schemaHash: String
    """
    Selects rows whose schemaTag dimension equals the given value if not null. To
    query for the null value, use {in: {schemaTag: [null]}} instead.
    """
    schemaTag: String
    """
    Selects rows whose serviceVersion dimension equals the given value if not
    null. To query for the null value, use {in: {serviceVersion: [null]}} instead.
    """
    serviceVersion: String
}

"""
Filter for data in ServiceQueryStats. Fields match if the corresponding
dimension's value is in the given list. All fields are implicitly ANDed together.
"""
input ServiceQueryStatsFilterIn {
    """
    Selects rows whose clientName dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    clientName: [String]
    """
    Selects rows whose clientReferenceId dimension is in the given list. A null
    value in the list means a row with null for that dimension.
    """
    clientReferenceId: [ID]
    """
    Selects rows whose clientVersion dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    clientVersion: [String]
    """
    Selects rows whose fromEngineproxy dimension is in the given list. A null
    value in the list means a row with null for that dimension.
    """
    fromEngineproxy: [String]
    """
    Selects rows whose queryId dimension is in the given list. A null value in the
    list means a row with null for that dimension.
    """
    queryId: [ID]
    """
    Selects rows whose queryName dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    queryName: [String]
    """
    Selects rows whose schemaHash dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    schemaHash: [String]
    """
    Selects rows whose schemaTag dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    schemaTag: [String]
    """
    Selects rows whose serviceVersion dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    serviceVersion: [String]
}

type ServiceQueryStatsMetrics {
    cacheTtlHistogram: DurationHistogram!
    cachedHistogram: DurationHistogram!
    cachedRequestsCount: Long!
    forbiddenOperationCount: Long!
    registeredOperationCount: Long!
    requestsWithErrorsCount: Long!
    totalLatencyHistogram: DurationHistogram!
    uncachedHistogram: DurationHistogram!
    uncachedRequestsCount: Long!
}

input ServiceQueryStatsOrderBySpec {
    column: ServiceQueryStatsColumn!
    direction: Ordering!
}

type ServiceQueryStatsRecord {
    """Dimensions of ServiceQueryStats that can be grouped by."""
    groupBy: ServiceQueryStatsDimensions!
    """Metrics of ServiceQueryStats that can be aggregated over."""
    metrics: ServiceQueryStatsMetrics!
    """Starting segment timestamp."""
    timestamp: Timestamp!
}

"""A map from role (permission) String to boolean that the current user is allowed for the root service"""
type ServiceRoles {
    canDelete: Boolean
    canDeleteSchemas: Boolean
    canManageDatadogMetricsConfig: Boolean
    canManageKeys: Boolean
    canManageQueryTriggers: Boolean
    canManageVariants: Boolean
    canPublishSchemas: Boolean
    canQuery: Boolean
    canQueryDeletedImplementingServices: Boolean
    canQueryImplementingServices: Boolean
    canQuerySchemas: Boolean
    canQueryTokens: Boolean
    canRegisterImplementingServices: Boolean
    canRegisterOperations: Boolean
    canRename: Boolean
    canUndelete: Boolean
    canUpdateAvatar: Boolean
    canUploadPartialSchemas: Boolean
    canUploadSchemas: Boolean
    canValidateSchemas: Boolean
    canWriteCompositionConfig: Boolean
    canWriteTraces: Boolean
}

"""A time window with a specified granularity over a given service."""
type ServiceStatsWindow {
    edgeServerInfos(
        """Filter to select what rows to return."""
        filter: ServiceEdgeServerInfosFilter
        """The maximum number of entries to return, cannot be more than 15000."""
        limit: Int = 10000
        """
        A list of OrderBySpecs to order ServiceEdgeServerInfos by. The earlier an
        OrderBySpec appears in the list, the higher priority it has in the final
        ordering. When empty or null, defaults to sorting by ascending timestamp.
        """
        orderBy: [ServiceEdgeServerInfosOrderBySpec!]
    ): [ServiceEdgeServerInfosRecord!]!
    errorStats(
        """Filter to select what rows to return."""
        filter: ServiceErrorStatsFilter
        """The maximum number of entries to return, cannot be more than 15000."""
        limit: Int = 10000
        """
        A list of OrderBySpecs to order ServiceErrorStats by. The earlier an
        OrderBySpec appears in the list, the higher priority it has in the final
        ordering. When empty or null, defaults to sorting by ascending timestamp.
        """
        orderBy: [ServiceErrorStatsOrderBySpec!]
    ): [ServiceErrorStatsRecord!]!
    fieldStats(
        """Filter to select what rows to return."""
        filter: ServiceFieldStatsFilter
        """The maximum number of entries to return, cannot be more than 15000."""
        limit: Int = 10000
        """
        A list of OrderBySpecs to order ServiceFieldStats by. The earlier an
        OrderBySpec appears in the list, the higher priority it has in the final
        ordering. When empty or null, defaults to sorting by ascending timestamp.
        """
        orderBy: [ServiceFieldStatsOrderBySpec!]
    ): [ServiceFieldStatsRecord!]!
    queryStats(
        """Filter to select what rows to return."""
        filter: ServiceQueryStatsFilter
        """The maximum number of entries to return, cannot be more than 15000."""
        limit: Int = 10000
        """
        A list of OrderBySpecs to order ServiceQueryStats by. The earlier an
        OrderBySpec appears in the list, the higher priority it has in the final
        ordering. When empty or null, defaults to sorting by ascending timestamp.
        """
        orderBy: [ServiceQueryStatsOrderBySpec!]
    ): [ServiceQueryStatsRecord!]!
    """From field rounded down to the nearest resolution."""
    roundedDownFrom: Timestamp!
    """To field rounded up to the nearest resolution."""
    roundedUpTo: Timestamp!
    tracePathErrorsRefs(
        """Filter to select what rows to return."""
        filter: ServiceTracePathErrorsRefsFilter
        """The maximum number of entries to return, cannot be more than 15000."""
        limit: Int = 10000
        """
        A list of OrderBySpecs to order ServiceTracePathErrorsRefs by. The earlier
        an OrderBySpec appears in the list, the higher priority it has in the final
        ordering. When empty or null, defaults to sorting by ascending timestamp.
        """
        orderBy: [ServiceTracePathErrorsRefsOrderBySpec!]
    ): [ServiceTracePathErrorsRefsRecord!]!
    traceRefs(
        """Filter to select what rows to return."""
        filter: ServiceTraceRefsFilter
        """The maximum number of entries to return, cannot be more than 15000."""
        limit: Int = 10000
        """
        A list of OrderBySpecs to order ServiceTraceRefs by. The earlier an
        OrderBySpec appears in the list, the higher priority it has in the final
        ordering. When empty or null, defaults to sorting by ascending timestamp.
        """
        orderBy: [ServiceTraceRefsOrderBySpec!]
    ): [ServiceTraceRefsRecord!]!
}

"""Columns of ServiceTracePathErrorsRefs."""
enum ServiceTracePathErrorsRefsColumn {
    CLIENT_NAME
    CLIENT_REFERENCE_ID
    CLIENT_VERSION
    DURATION_BUCKET
    ERRORS_COUNT_IN_PATH
    ERRORS_COUNT_IN_TRACE
    ERROR_MESSAGE
    GCS_BUCKET
    PATH
    QUERY_ID
    QUERY_NAME
    QUERY_SIGNATURE
    SCHEMA_HASH
    SCHEMA_TAG
    SERVICE_VERSION
    TIMESTAMP
    TRACE_HTTP_STATUS_CODE
    TRACE_ID
    TRACE_SIZE_BYTES
    TRACE_STARTS_AT
}

type ServiceTracePathErrorsRefsDimensions {
    clientName: String
    clientReferenceId: ID
    clientVersion: String
    durationBucket: Int
    errorMessage: String
    gcsBucket: String
    path: String
    queryId: ID
    queryName: String
    querySignature: String
    schemaHash: String
    schemaTag: String
    serviceVersion: String
    traceHttpStatusCode: Int
    traceId: ID
    traceStartsAt: Timestamp
}

"""
Filter for data in ServiceTracePathErrorsRefs. Fields with dimension names
represent equality checks. All fields are implicitly ANDed together.
"""
input ServiceTracePathErrorsRefsFilter {
    and: [ServiceTracePathErrorsRefsFilter!]
    """
    Selects rows whose clientName dimension equals the given value if not null. To
    query for the null value, use {in: {clientName: [null]}} instead.
    """
    clientName: String
    """
    Selects rows whose clientReferenceId dimension equals the given value if not
    null. To query for the null value, use {in: {clientReferenceId: [null]}} instead.
    """
    clientReferenceId: ID
    """
    Selects rows whose clientVersion dimension equals the given value if not null.
    To query for the null value, use {in: {clientVersion: [null]}} instead.
    """
    clientVersion: String
    """
    Selects rows whose durationBucket dimension equals the given value if not
    null. To query for the null value, use {in: {durationBucket: [null]}} instead.
    """
    durationBucket: Int
    """
    Selects rows whose errorMessage dimension equals the given value if not null.
    To query for the null value, use {in: {errorMessage: [null]}} instead.
    """
    errorMessage: String
    """
    Selects rows whose gcsBucket dimension equals the given value if not null. To
    query for the null value, use {in: {gcsBucket: [null]}} instead.
    """
    gcsBucket: String
    in: ServiceTracePathErrorsRefsFilterIn
    not: ServiceTracePathErrorsRefsFilter
    or: [ServiceTracePathErrorsRefsFilter!]
    """
    Selects rows whose path dimension equals the given value if not null. To query
    for the null value, use {in: {path: [null]}} instead.
    """
    path: String
    """
    Selects rows whose queryId dimension equals the given value if not null. To
    query for the null value, use {in: {queryId: [null]}} instead.
    """
    queryId: ID
    """
    Selects rows whose queryName dimension equals the given value if not null. To
    query for the null value, use {in: {queryName: [null]}} instead.
    """
    queryName: String
    """
    Selects rows whose schemaHash dimension equals the given value if not null. To
    query for the null value, use {in: {schemaHash: [null]}} instead.
    """
    schemaHash: String
    """
    Selects rows whose schemaTag dimension equals the given value if not null. To
    query for the null value, use {in: {schemaTag: [null]}} instead.
    """
    schemaTag: String
    """
    Selects rows whose serviceVersion dimension equals the given value if not
    null. To query for the null value, use {in: {serviceVersion: [null]}} instead.
    """
    serviceVersion: String
    """
    Selects rows whose traceHttpStatusCode dimension equals the given value if not
    null. To query for the null value, use {in: {traceHttpStatusCode: [null]}} instead.
    """
    traceHttpStatusCode: Int
    """
    Selects rows whose traceId dimension equals the given value if not null. To
    query for the null value, use {in: {traceId: [null]}} instead.
    """
    traceId: ID
}

"""
Filter for data in ServiceTracePathErrorsRefs. Fields match if the corresponding
dimension's value is in the given list. All fields are implicitly ANDed together.
"""
input ServiceTracePathErrorsRefsFilterIn {
    """
    Selects rows whose clientName dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    clientName: [String]
    """
    Selects rows whose clientReferenceId dimension is in the given list. A null
    value in the list means a row with null for that dimension.
    """
    clientReferenceId: [ID]
    """
    Selects rows whose clientVersion dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    clientVersion: [String]
    """
    Selects rows whose durationBucket dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    durationBucket: [Int]
    """
    Selects rows whose errorMessage dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    errorMessage: [String]
    """
    Selects rows whose gcsBucket dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    gcsBucket: [String]
    """Selects rows whose path dimension is in the given list. A null value in the list means a row with null for that dimension."""
    path: [String]
    """
    Selects rows whose queryId dimension is in the given list. A null value in the
    list means a row with null for that dimension.
    """
    queryId: [ID]
    """
    Selects rows whose queryName dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    queryName: [String]
    """
    Selects rows whose schemaHash dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    schemaHash: [String]
    """
    Selects rows whose schemaTag dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    schemaTag: [String]
    """
    Selects rows whose serviceVersion dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    serviceVersion: [String]
    """
    Selects rows whose traceHttpStatusCode dimension is in the given list. A null
    value in the list means a row with null for that dimension.
    """
    traceHttpStatusCode: [Int]
    """
    Selects rows whose traceId dimension is in the given list. A null value in the
    list means a row with null for that dimension.
    """
    traceId: [ID]
}

type ServiceTracePathErrorsRefsMetrics {
    errorsCountInPath: Long!
    errorsCountInTrace: Long!
    traceSizeBytes: Long!
}

input ServiceTracePathErrorsRefsOrderBySpec {
    column: ServiceTracePathErrorsRefsColumn!
    direction: Ordering!
}

type ServiceTracePathErrorsRefsRecord {
    """Dimensions of ServiceTracePathErrorsRefs that can be grouped by."""
    groupBy: ServiceTracePathErrorsRefsDimensions!
    """Metrics of ServiceTracePathErrorsRefs that can be aggregated over."""
    metrics: ServiceTracePathErrorsRefsMetrics!
    """Starting segment timestamp."""
    timestamp: Timestamp!
}

"""Columns of ServiceTraceRefs."""
enum ServiceTraceRefsColumn {
    CLIENT_NAME
    CLIENT_REFERENCE_ID
    CLIENT_VERSION
    DURATION_BUCKET
    DURATION_NS
    GCS_BUCKET
    QUERY_ID
    QUERY_NAME
    QUERY_SIGNATURE
    SCHEMA_HASH
    SCHEMA_TAG
    SERVICE_VERSION
    TIMESTAMP
    TRACE_ID
    TRACE_SIZE_BYTES
}

type ServiceTraceRefsDimensions {
    clientName: String
    clientReferenceId: ID
    clientVersion: String
    durationBucket: Int
    gcsBucket: String
    queryId: ID
    queryName: String
    querySignature: String
    schemaHash: String
    schemaTag: String
    serviceVersion: String
    traceId: ID
}

"""
Filter for data in ServiceTraceRefs. Fields with dimension names represent
equality checks. All fields are implicitly ANDed together.
"""
input ServiceTraceRefsFilter {
    and: [ServiceTraceRefsFilter!]
    """
    Selects rows whose clientName dimension equals the given value if not null. To
    query for the null value, use {in: {clientName: [null]}} instead.
    """
    clientName: String
    """
    Selects rows whose clientReferenceId dimension equals the given value if not
    null. To query for the null value, use {in: {clientReferenceId: [null]}} instead.
    """
    clientReferenceId: ID
    """
    Selects rows whose clientVersion dimension equals the given value if not null.
    To query for the null value, use {in: {clientVersion: [null]}} instead.
    """
    clientVersion: String
    """
    Selects rows whose durationBucket dimension equals the given value if not
    null. To query for the null value, use {in: {durationBucket: [null]}} instead.
    """
    durationBucket: Int
    """
    Selects rows whose gcsBucket dimension equals the given value if not null. To
    query for the null value, use {in: {gcsBucket: [null]}} instead.
    """
    gcsBucket: String
    in: ServiceTraceRefsFilterIn
    not: ServiceTraceRefsFilter
    or: [ServiceTraceRefsFilter!]
    """
    Selects rows whose queryId dimension equals the given value if not null. To
    query for the null value, use {in: {queryId: [null]}} instead.
    """
    queryId: ID
    """
    Selects rows whose queryName dimension equals the given value if not null. To
    query for the null value, use {in: {queryName: [null]}} instead.
    """
    queryName: String
    """
    Selects rows whose schemaHash dimension equals the given value if not null. To
    query for the null value, use {in: {schemaHash: [null]}} instead.
    """
    schemaHash: String
    """
    Selects rows whose schemaTag dimension equals the given value if not null. To
    query for the null value, use {in: {schemaTag: [null]}} instead.
    """
    schemaTag: String
    """
    Selects rows whose serviceVersion dimension equals the given value if not
    null. To query for the null value, use {in: {serviceVersion: [null]}} instead.
    """
    serviceVersion: String
    """
    Selects rows whose traceId dimension equals the given value if not null. To
    query for the null value, use {in: {traceId: [null]}} instead.
    """
    traceId: ID
}

"""
Filter for data in ServiceTraceRefs. Fields match if the corresponding
dimension's value is in the given list. All fields are implicitly ANDed together.
"""
input ServiceTraceRefsFilterIn {
    """
    Selects rows whose clientName dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    clientName: [String]
    """
    Selects rows whose clientReferenceId dimension is in the given list. A null
    value in the list means a row with null for that dimension.
    """
    clientReferenceId: [ID]
    """
    Selects rows whose clientVersion dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    clientVersion: [String]
    """
    Selects rows whose durationBucket dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    durationBucket: [Int]
    """
    Selects rows whose gcsBucket dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    gcsBucket: [String]
    """
    Selects rows whose queryId dimension is in the given list. A null value in the
    list means a row with null for that dimension.
    """
    queryId: [ID]
    """
    Selects rows whose queryName dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    queryName: [String]
    """
    Selects rows whose schemaHash dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    schemaHash: [String]
    """
    Selects rows whose schemaTag dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    schemaTag: [String]
    """
    Selects rows whose serviceVersion dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    serviceVersion: [String]
    """
    Selects rows whose traceId dimension is in the given list. A null value in the
    list means a row with null for that dimension.
    """
    traceId: [ID]
}

type ServiceTraceRefsMetrics {
    durationNs: Long!
    traceSizeBytes: Long!
}

input ServiceTraceRefsOrderBySpec {
    column: ServiceTraceRefsColumn!
    direction: Ordering!
}

type ServiceTraceRefsRecord {
    """Dimensions of ServiceTraceRefs that can be grouped by."""
    groupBy: ServiceTraceRefsDimensions!
    """Metrics of ServiceTraceRefs that can be aggregated over."""
    metrics: ServiceTraceRefsMetrics!
    """Starting segment timestamp."""
    timestamp: Timestamp!
}

"""Slack notification channel"""
type SlackChannel implements Channel {
    id: ID!
    name: String
    queryTriggers: [QueryTrigger!]!
    url: String!
}

"""Slack notification channel parameters"""
input SlackChannelInput {
    name: String
    url: String!
}

input SlackNotificationField {
    key: String!
    value: String!
}

"""Slack notification message"""
input SlackNotificationInput {
    color: String
    fallback: String!
    fields: [SlackNotificationField!]
    iconUrl: String
    text: String
    timestamp: Timestamp
    title: String
    titleLink: String
    username: String
}

"""A time window with a specified granularity."""
type StatsWindow {
    edgeServerInfos(
        """Filter to select what rows to return."""
        filter: EdgeServerInfosFilter
        """The maximum number of entries to return, cannot be more than 15000."""
        limit: Int = 10000
        """
        A list of OrderBySpecs to order EdgeServerInfos by. The earlier an
        OrderBySpec appears in the list, the higher priority it has in the final
        ordering. When empty or null, defaults to sorting by ascending timestamp.
        """
        orderBy: [EdgeServerInfosOrderBySpec!]
    ): [EdgeServerInfosRecord!]!
    errorStats(
        """Filter to select what rows to return."""
        filter: ErrorStatsFilter
        """The maximum number of entries to return, cannot be more than 15000."""
        limit: Int = 10000
        """
        A list of OrderBySpecs to order ErrorStats by. The earlier an OrderBySpec
        appears in the list, the higher priority it has in the final ordering. When
        empty or null, defaults to sorting by ascending timestamp.
        """
        orderBy: [ErrorStatsOrderBySpec!]
    ): [ErrorStatsRecord!]!
    fieldStats(
        """Filter to select what rows to return."""
        filter: FieldStatsFilter
        """The maximum number of entries to return, cannot be more than 15000."""
        limit: Int = 10000
        """
        A list of OrderBySpecs to order FieldStats by. The earlier an OrderBySpec
        appears in the list, the higher priority it has in the final ordering. When
        empty or null, defaults to sorting by ascending timestamp.
        """
        orderBy: [FieldStatsOrderBySpec!]
    ): [FieldStatsRecord!]!
    queryStats(
        """Filter to select what rows to return."""
        filter: QueryStatsFilter
        """The maximum number of entries to return, cannot be more than 15000."""
        limit: Int = 10000
        """
        A list of OrderBySpecs to order QueryStats by. The earlier an OrderBySpec
        appears in the list, the higher priority it has in the final ordering. When
        empty or null, defaults to sorting by ascending timestamp.
        """
        orderBy: [QueryStatsOrderBySpec!]
    ): [QueryStatsRecord!]!
    """From field rounded down to the nearest resolution."""
    roundedDownFrom: Timestamp!
    """To field rounded up to the nearest resolution."""
    roundedUpTo: Timestamp!
    tracePathErrorsRefs(
        """Filter to select what rows to return."""
        filter: TracePathErrorsRefsFilter
        """The maximum number of entries to return, cannot be more than 15000."""
        limit: Int = 10000
        """
        A list of OrderBySpecs to order TracePathErrorsRefs by. The earlier an
        OrderBySpec appears in the list, the higher priority it has in the final
        ordering. When empty or null, defaults to sorting by ascending timestamp.
        """
        orderBy: [TracePathErrorsRefsOrderBySpec!]
    ): [TracePathErrorsRefsRecord!]!
    traceRefs(
        """Filter to select what rows to return."""
        filter: TraceRefsFilter
        """The maximum number of entries to return, cannot be more than 15000."""
        limit: Int = 10000
        """
        A list of OrderBySpecs to order TraceRefs by. The earlier an OrderBySpec
        appears in the list, the higher priority it has in the final ordering. When
        empty or null, defaults to sorting by ascending timestamp.
        """
        orderBy: [TraceRefsOrderBySpec!]
    ): [TraceRefsRecord!]!
}

scalar StringOrInt

type StringToString {
    key: String!
    value: String!
}

input StringToStringInput {
    key: String!
    value: String!
}

type SubscriptionOptions {
    """Enables notifications for schema updates"""
    schemaUpdates: Boolean!
}

input SubscriptionOptionsInput {
    """Enables notifications for schema updates"""
    schemaUpdates: Boolean!
}

enum SubscriptionState {
    ACTIVE
    CANCELED
    EXPIRED
    FUTURE
    PAST_DUE
    PENDING
    UNKNOWN
}

type TimezoneOffset {
    minutesOffsetFromUTC: Int!
    zoneID: String!
}

type Trace {
    cacheMaxAgeMs: Float
    cacheScope: CacheScope
    clientName: String
    clientReferenceId: ID
    clientVersion: String
    durationMs: Float!
    endTime: Timestamp!
    http: TraceHTTP
    id: ID!
    operationName: String
    protobuf: Protobuf!
    root: TraceNode!
    signature: String!
    signatureId: ID!
    startTime: Timestamp!
    variablesJSON: [StringToString!]!
}

type TraceError {
    json: String!
    locations: [TraceSourceLocation!]!
    message: String!
    timestamp: Timestamp
}

type TraceHTTP {
    host: String
    method: HTTPMethod!
    path: String
    protocol: String
    requestHeaders: [StringToString!]!
    responseHeaders: [StringToString!]!
    secure: Boolean!
    statusCode: Int!
}

type TraceNode {
    cacheMaxAgeMs: Float
    cacheScope: CacheScope
    children: [TraceNode!]!
    childrenIds: [ID!]!
    descendants: [TraceNode!]!
    descendantsIds: [ID!]!
    endTime: Timestamp!
    errors: [TraceError!]!
    id: ID!
    key: StringOrInt
    originalFieldName: String
    parent: ID!
    parentId: ID
    path: [String!]!
    startTime: Timestamp!
    type: String
}

"""Columns of TracePathErrorsRefs."""
enum TracePathErrorsRefsColumn {
    CLIENT_NAME
    CLIENT_REFERENCE_ID
    CLIENT_VERSION
    DURATION_BUCKET
    ERRORS_COUNT_IN_PATH
    ERRORS_COUNT_IN_TRACE
    ERROR_MESSAGE
    GCS_BUCKET
    PATH
    QUERY_ID
    QUERY_NAME
    QUERY_SIGNATURE
    SCHEMA_HASH
    SCHEMA_TAG
    SERVICE_ID
    SERVICE_VERSION
    TIMESTAMP
    TRACE_HTTP_STATUS_CODE
    TRACE_ID
    TRACE_SIZE_BYTES
    TRACE_STARTS_AT
}

type TracePathErrorsRefsDimensions {
    clientName: String
    clientReferenceId: ID
    clientVersion: String
    durationBucket: Int
    errorMessage: String
    gcsBucket: String
    """If metrics were collected from a federated service, this field will be prefixed with `service:<SERVICE_NAME>.`"""
    path: String
    queryId: ID
    queryName: String
    querySignature: String
    schemaHash: String
    schemaTag: String
    serviceId: ID
    serviceVersion: String
    traceHttpStatusCode: Int
    traceId: ID
    traceStartsAt: Timestamp
}

"""
Filter for data in TracePathErrorsRefs. Fields with dimension names represent
equality checks. All fields are implicitly ANDed together.
"""
input TracePathErrorsRefsFilter {
    and: [TracePathErrorsRefsFilter!]
    """
    Selects rows whose clientName dimension equals the given value if not null. To
    query for the null value, use {in: {clientName: [null]}} instead.
    """
    clientName: String
    """
    Selects rows whose clientReferenceId dimension equals the given value if not
    null. To query for the null value, use {in: {clientReferenceId: [null]}} instead.
    """
    clientReferenceId: ID
    """
    Selects rows whose clientVersion dimension equals the given value if not null.
    To query for the null value, use {in: {clientVersion: [null]}} instead.
    """
    clientVersion: String
    """
    Selects rows whose durationBucket dimension equals the given value if not
    null. To query for the null value, use {in: {durationBucket: [null]}} instead.
    """
    durationBucket: Int
    """
    Selects rows whose errorMessage dimension equals the given value if not null.
    To query for the null value, use {in: {errorMessage: [null]}} instead.
    """
    errorMessage: String
    """
    Selects rows whose gcsBucket dimension equals the given value if not null. To
    query for the null value, use {in: {gcsBucket: [null]}} instead.
    """
    gcsBucket: String
    in: TracePathErrorsRefsFilterIn
    not: TracePathErrorsRefsFilter
    or: [TracePathErrorsRefsFilter!]
    """
    Selects rows whose path dimension equals the given value if not null. To query
    for the null value, use {in: {path: [null]}} instead.
    """
    path: String
    """
    Selects rows whose queryId dimension equals the given value if not null. To
    query for the null value, use {in: {queryId: [null]}} instead.
    """
    queryId: ID
    """
    Selects rows whose queryName dimension equals the given value if not null. To
    query for the null value, use {in: {queryName: [null]}} instead.
    """
    queryName: String
    """
    Selects rows whose schemaHash dimension equals the given value if not null. To
    query for the null value, use {in: {schemaHash: [null]}} instead.
    """
    schemaHash: String
    """
    Selects rows whose schemaTag dimension equals the given value if not null. To
    query for the null value, use {in: {schemaTag: [null]}} instead.
    """
    schemaTag: String
    """
    Selects rows whose serviceId dimension equals the given value if not null. To
    query for the null value, use {in: {serviceId: [null]}} instead.
    """
    serviceId: ID
    """
    Selects rows whose serviceVersion dimension equals the given value if not
    null. To query for the null value, use {in: {serviceVersion: [null]}} instead.
    """
    serviceVersion: String
    """
    Selects rows whose traceHttpStatusCode dimension equals the given value if not
    null. To query for the null value, use {in: {traceHttpStatusCode: [null]}} instead.
    """
    traceHttpStatusCode: Int
    """
    Selects rows whose traceId dimension equals the given value if not null. To
    query for the null value, use {in: {traceId: [null]}} instead.
    """
    traceId: ID
}

"""
Filter for data in TracePathErrorsRefs. Fields match if the corresponding
dimension's value is in the given list. All fields are implicitly ANDed together.
"""
input TracePathErrorsRefsFilterIn {
    """
    Selects rows whose clientName dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    clientName: [String]
    """
    Selects rows whose clientReferenceId dimension is in the given list. A null
    value in the list means a row with null for that dimension.
    """
    clientReferenceId: [ID]
    """
    Selects rows whose clientVersion dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    clientVersion: [String]
    """
    Selects rows whose durationBucket dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    durationBucket: [Int]
    """
    Selects rows whose errorMessage dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    errorMessage: [String]
    """
    Selects rows whose gcsBucket dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    gcsBucket: [String]
    """Selects rows whose path dimension is in the given list. A null value in the list means a row with null for that dimension."""
    path: [String]
    """
    Selects rows whose queryId dimension is in the given list. A null value in the
    list means a row with null for that dimension.
    """
    queryId: [ID]
    """
    Selects rows whose queryName dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    queryName: [String]
    """
    Selects rows whose schemaHash dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    schemaHash: [String]
    """
    Selects rows whose schemaTag dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    schemaTag: [String]
    """
    Selects rows whose serviceId dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    serviceId: [ID]
    """
    Selects rows whose serviceVersion dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    serviceVersion: [String]
    """
    Selects rows whose traceHttpStatusCode dimension is in the given list. A null
    value in the list means a row with null for that dimension.
    """
    traceHttpStatusCode: [Int]
    """
    Selects rows whose traceId dimension is in the given list. A null value in the
    list means a row with null for that dimension.
    """
    traceId: [ID]
}

type TracePathErrorsRefsMetrics {
    errorsCountInPath: Long!
    errorsCountInTrace: Long!
    traceSizeBytes: Long!
}

input TracePathErrorsRefsOrderBySpec {
    column: TracePathErrorsRefsColumn!
    direction: Ordering!
}

type TracePathErrorsRefsRecord {
    """Dimensions of TracePathErrorsRefs that can be grouped by."""
    groupBy: TracePathErrorsRefsDimensions!
    """Metrics of TracePathErrorsRefs that can be aggregated over."""
    metrics: TracePathErrorsRefsMetrics!
    """Starting segment timestamp."""
    timestamp: Timestamp!
}

"""Columns of TraceRefs."""
enum TraceRefsColumn {
    CLIENT_NAME
    CLIENT_REFERENCE_ID
    CLIENT_VERSION
    DURATION_BUCKET
    DURATION_NS
    GCS_BUCKET
    QUERY_ID
    QUERY_NAME
    QUERY_SIGNATURE
    SCHEMA_HASH
    SCHEMA_TAG
    SERVICE_ID
    SERVICE_VERSION
    TIMESTAMP
    TRACE_ID
    TRACE_SIZE_BYTES
}

type TraceRefsDimensions {
    clientName: String
    clientReferenceId: ID
    clientVersion: String
    durationBucket: Int
    gcsBucket: String
    queryId: ID
    queryName: String
    querySignature: String
    schemaHash: String
    schemaTag: String
    serviceId: ID
    serviceVersion: String
    traceId: ID
}

"""
Filter for data in TraceRefs. Fields with dimension names represent equality
checks. All fields are implicitly ANDed together.
"""
input TraceRefsFilter {
    and: [TraceRefsFilter!]
    """
    Selects rows whose clientName dimension equals the given value if not null. To
    query for the null value, use {in: {clientName: [null]}} instead.
    """
    clientName: String
    """
    Selects rows whose clientReferenceId dimension equals the given value if not
    null. To query for the null value, use {in: {clientReferenceId: [null]}} instead.
    """
    clientReferenceId: ID
    """
    Selects rows whose clientVersion dimension equals the given value if not null.
    To query for the null value, use {in: {clientVersion: [null]}} instead.
    """
    clientVersion: String
    """
    Selects rows whose durationBucket dimension equals the given value if not
    null. To query for the null value, use {in: {durationBucket: [null]}} instead.
    """
    durationBucket: Int
    """
    Selects rows whose gcsBucket dimension equals the given value if not null. To
    query for the null value, use {in: {gcsBucket: [null]}} instead.
    """
    gcsBucket: String
    in: TraceRefsFilterIn
    not: TraceRefsFilter
    or: [TraceRefsFilter!]
    """
    Selects rows whose queryId dimension equals the given value if not null. To
    query for the null value, use {in: {queryId: [null]}} instead.
    """
    queryId: ID
    """
    Selects rows whose queryName dimension equals the given value if not null. To
    query for the null value, use {in: {queryName: [null]}} instead.
    """
    queryName: String
    """
    Selects rows whose schemaHash dimension equals the given value if not null. To
    query for the null value, use {in: {schemaHash: [null]}} instead.
    """
    schemaHash: String
    """
    Selects rows whose schemaTag dimension equals the given value if not null. To
    query for the null value, use {in: {schemaTag: [null]}} instead.
    """
    schemaTag: String
    """
    Selects rows whose serviceId dimension equals the given value if not null. To
    query for the null value, use {in: {serviceId: [null]}} instead.
    """
    serviceId: ID
    """
    Selects rows whose serviceVersion dimension equals the given value if not
    null. To query for the null value, use {in: {serviceVersion: [null]}} instead.
    """
    serviceVersion: String
    """
    Selects rows whose traceId dimension equals the given value if not null. To
    query for the null value, use {in: {traceId: [null]}} instead.
    """
    traceId: ID
}

"""
Filter for data in TraceRefs. Fields match if the corresponding dimension's
value is in the given list. All fields are implicitly ANDed together.
"""
input TraceRefsFilterIn {
    """
    Selects rows whose clientName dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    clientName: [String]
    """
    Selects rows whose clientReferenceId dimension is in the given list. A null
    value in the list means a row with null for that dimension.
    """
    clientReferenceId: [ID]
    """
    Selects rows whose clientVersion dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    clientVersion: [String]
    """
    Selects rows whose durationBucket dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    durationBucket: [Int]
    """
    Selects rows whose gcsBucket dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    gcsBucket: [String]
    """
    Selects rows whose queryId dimension is in the given list. A null value in the
    list means a row with null for that dimension.
    """
    queryId: [ID]
    """
    Selects rows whose queryName dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    queryName: [String]
    """
    Selects rows whose schemaHash dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    schemaHash: [String]
    """
    Selects rows whose schemaTag dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    schemaTag: [String]
    """
    Selects rows whose serviceId dimension is in the given list. A null value in
    the list means a row with null for that dimension.
    """
    serviceId: [ID]
    """
    Selects rows whose serviceVersion dimension is in the given list. A null value
    in the list means a row with null for that dimension.
    """
    serviceVersion: [String]
    """
    Selects rows whose traceId dimension is in the given list. A null value in the
    list means a row with null for that dimension.
    """
    traceId: [ID]
}

type TraceRefsMetrics {
    durationNs: Long!
    traceSizeBytes: Long!
}

input TraceRefsOrderBySpec {
    column: TraceRefsColumn!
    direction: Ordering!
}

type TraceRefsRecord {
    """Dimensions of TraceRefs that can be grouped by."""
    groupBy: TraceRefsDimensions!
    """Metrics of TraceRefs that can be aggregated over."""
    metrics: TraceRefsMetrics!
    """Starting segment timestamp."""
    timestamp: Timestamp!
}

type TraceSourceLocation {
    column: Int!
    line: Int!
}

type User implements Identity {
    acceptedPrivacyPolicyAt: Timestamp
    accounts: [Account!]! @deprecated(reason: "Replaced with User.memberships.account")
    apiKeys(includeCookies: Boolean = false): [ApiKey!]!
    """
    Get an URL to which an avatar image can be uploaded. Client uploads by sending a PUT request
    with the image data to MediaUploadInfo.url. Client SHOULD set the "Content-Type" header to the
    browser-inferred MIME type, and SHOULD set the "x-apollo-content-filename" header to the
    filename, if such information is available. Client MUST set the "x-apollo-csrf-token" header to
    MediaUploadInfo.csrfToken.
    """
    avatarUpload: AvatarUploadResult
    """
    Get an image URL for the user's avatar. Note that CORS is not enabled for these URLs. The size
    argument is used for bandwidth reduction, and should be the size of the image as displayed in the
    application. Apollo's media server will downscale larger images to at least the requested size,
    but this will not happen for third-party media servers.
    """
    avatarUrl(size: Int! = 40): String
    canUpdateAvatar: Boolean!
    canUpdateEmail: Boolean!
    canUpdateFullName: Boolean!
    createdAt: Timestamp!
    email: String
    emailModifiedAt: Timestamp
    emailVerified: Boolean!
    fullName: String!
    id: ID!
    """
    This role is reserved exclusively for internal MDG employees, and it controls what access they may have to other
    organizations within Graph Manager. Only admins are allowed to see this field.
    """
    internalAdminRole: InternalMdgAdminRole
    """Last time any API token from this user was used against AGM services"""
    lastAuthenticatedAt: Timestamp
    logoutAfterIdleMs: Int
    memberships: [UserMembership!]!
    name: String!
    synchronized: Boolean!
    type: UserType!
}

type UserMembership {
    account: Account!
    createdAt: Timestamp!
    permission: UserPermission!
}

type UserMutation {
    acceptPrivacyPolicy: Void
    """Change the user's password"""
    changePassword(newPassword: String!, previousPassword: String!): Void
    """Delete the user's avatar. Requires User.canUpdateAvatar to be true."""
    deleteAvatar: AvatarDeleteError
    """Hard deletes the associated user. Throws an error otherwise with reason included."""
    hardDelete: Void
    """Create a new API key for this user. Must take in a name for this key."""
    newKey(keyName: String!): ApiKey!
    """
    Create a new API key for this user if there are no current API keys.
    If an API key already exists, this will return one at random and not create a new one.
    """
    provisionKey(keyName: String! = "add-a-name"): ApiKeyProvision
    """Refresh information about the user from its upstream service (eg list of organizations from GitHub)"""
    refresh: User
    """Removes the given key from this user. Can be used to remove either a web cookie or a user API key."""
    removeKey(key: String!): Void
    """Renames the given key to the new key name."""
    renameKey(key: String!, newKeyName: String!): ApiKey!
    resendVerificationEmail: Void
    """Update information about a user; all arguments are optional"""
    update(email: String, fullName: String): User
    """
    Update user to have the given internal mdg admin role.
    It is necessary to be an MDG_INTERNAL_SUPER_ADMIN to perform update.
    Additionally, upserting a null value explicitly revokes this user's
    admin status.
    """
    updateRole(newRole: InternalMdgAdminRole): User
    user: User!
    verifyEmail(token: String!): User
}

enum UserPermission {
    ADMIN
    DEMO
    STANDARD
}

enum UserType {
    APOLLO
    GITHUB
    SSO
}

type Query {
    """Account by ID"""
    account(id: ID!): Account
    """Whether an account ID is available for mutation{newAccount(id:)}"""
    accountIDAvailable(id: ID!): Boolean!
    """All accounts"""
    allAccounts: [Account!]
    """All available plans"""
    allPlans: [BillingPlan!]!
    """All services"""
    allServices: [Service!]
    """All timezones with their offsets from UTC"""
    allTimezoneOffsets: [TimezoneOffset!]!
    """All users"""
    allUsers: [User!]
    """ Get the unsubscribe settings for a given email."""
    emailPreferences(email: String!, token: String!): EmailPreferences
    internalActiveCronJobs: [CronJob!]!
    internalAdminUsers: [InternalAdminUser!]
    internalUnresolvedCronExecutionFailures: [CronExecution!]!
    """Current identity, null if not authenticated"""
    me: Identity
    """Look up a plan by ID"""
    plan(id: ID): BillingPlan
    """Service by ID"""
    service(id: ID!): Service
    """
    Query statistics across all services. For admins only; normal users must go
    through AccountsStatsWindow or ServiceStatsWindow.
    """
    stats(
        from: Timestamp!
        """Granularity of buckets. Defaults to the entire range (aggregate all data into a single durationBucket) when null."""
        resolution: Resolution
        """Defaults to the current time when null."""
        to: Timestamp
    ): StatsWindow!
    """User by ID"""
    user(id: ID!): User
}

type Mutation {
    account(id: ID!): AccountMutation
    """
    Finalize a password reset with a token included in the E-mail link,
    returns the corresponding login email when successful
    """
    finalizePasswordReset(newPassword: String!, resetToken: String!): String
    """Join an account with a token"""
    joinAccount(accountId: ID!, joinToken: String!): Account
    me: IdentityMutation
    newAccount(id: ID!): Account
    newService(accountId: ID!, id: ID!, name: String): Service
    """Refresh all plans from third-party billing service"""
    plansRefreshBilling: Void
    """Ask for a user's password to be reset by E-mail"""
    resetPassword(email: String!): Void
    resolveAllInternalCronExecutions(group: String, name: String): Void
    resolveInternalCronExecution(id: ID!): CronExecution
    service(id: ID!): ServiceMutation
    """Set the subscriptions for a given email"""
    setSubscriptions(email: String!, subscriptions: [EmailCategory!]!, token: String!): EmailPreferences
    signUp(email: String!, fullName: String!, password: String!): User
    """This is called by the form shown to users after they delete their user or organization account."""
    submitPostDeletionFeedback(feedback: String!, targetIdentifier: ID!, targetType: DeletionTargetType!): Void
    """Unsubscribe a given email from all emails"""
    unsubscribeFromAll(email: String!, token: String!): EmailPreferences
    user(id: ID!): UserMutation
}

